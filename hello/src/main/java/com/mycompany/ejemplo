@RestController
@RequestMapping("/api/invoices")
public class InvoiceController {
    InvoiceService invoiceService;
    InvoiceMapper invoiceMapper;
    ProductRepository productRepository;
    ClientService clientService;
    CardService cardService;

    @Autowired
    public InvoiceController(InvoiceService invoiceService, InvoiceMapper invoiceMapper
            , ProductRepository productRepository
            , ClientService clientService
            , CardService cardService) {
        this.invoiceService = invoiceService;
        this.invoiceMapper = invoiceMapper;
        this.productRepository = productRepository;
        this.clientService = clientService;
        this.cardService =  cardService;
    }

    @PostMapping()
    public ResponseEntity<?> save(@RequestBody InvoiceRequest invoiceRequest) {
        Invoice invoice = invoiceMapper.toEntity(invoiceRequest);
        List<Product> products = productRepository.findAllById(invoiceRequest.getProduct());
        Client client = clientService.findById(invoiceRequest.getClient())
                .orElseThrow(() -> new IllegalArgumentException("The client id not found"));
        invoice.setProduct(products);
        invoice.setClient(client);
        invoice.setTotalAmount(invoice.getProduct().stream().mapToDouble(Product::getPrice).sum());

        List<Card> cards = cardService.findByClient(invoice.getClient());
        for (Card card : cards) {
            if (invoice.getTotalAmount() < card.getAmount()) {
                card.setAmount(card.getAmount()-invoice.getTotalAmount());
                cardService.save(card);
                return ResponseEntity.status(HttpStatus.CREATED).body(invoiceMapper.toDto(invoiceService.save(invoice)));
            }
        }
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new RuntimeException("The amount is bigger than amount card"));
    }

@Service
public class InvoiceService {

    InvoiceRepository invoiceRepository;
    CardRepository cardRepository;

    @Autowired
    public InvoiceService(InvoiceRepository invoiceRepository, CardRepository cardRepository) {
        this.invoiceRepository = invoiceRepository;
        this.cardRepository =  cardRepository;
    }

    public Invoice save(Invoice invoice){
        return invoiceRepository.save(invoice);
    }
