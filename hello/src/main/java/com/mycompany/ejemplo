private DigitalMenuResponse validateResponseWithCode(final Response response){

        switch(response.getStatus()){
            case 200:
                return digitalMenuHandleStatus200(response);
            case 422:
                return digitalMenuHandleStatus422(response);
            case 401:
                return digitalMenuHandleStatus401(response);
            case 403:
                return digitalMenuHandleStatus403(response);
            case 404:
                return digitalMenuHandleStatus404(response);
            case 502:
            case 503:
                return digitalMenuHandleStatus50X(response);
            default:
                return digitalMenuHandleUnknowStatus(response);
        }
    }

    private DigitalMenuResponse digitalMenuHandleStatus200(Response response){
        final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
        return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
    }
    private DigitalMenuResponse digitalMenuHandleStatus422(Response response){
        final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response
                .readEntity(DigitalMenuErrorWithParamsResponse.class);
        throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse,
                response.getStatus());
    }

    private DigitalMenuResponse digitalMenuHandleStatus401(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);
    }
    private DigitalMenuResponse digitalMenuHandleStatus403(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR,
                digitalMenuErrorResponse.getDetail(), response.getStatus());
    }
    private DigitalMenuResponse digitalMenuHandleStatus404(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
    }
    private DigitalMenuResponse digitalMenuHandleStatus50X(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
    }
    private DigitalMenuResponse digitalMenuHandleUnknowStatus(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);
    }







@Test
    public void testValidateResponseWithCode_Status200() {
        // Simula una respuesta con código de estado 200
        Response mockResponse = mock(Response.class);
        when(mockResponse.getStatus()).thenReturn(Status.OK.getStatusCode());

        // Simula el cuerpo de la respuesta
        DigitalMenuIBDPResponse mockBody = new DigitalMenuIBDPResponse();
        when(mockResponse.readEntity(DigitalMenuIBDPResponse.class)).thenReturn(mockBody);

        // Llama al método que se está probando
        DigitalMenuResponse result = digitalMenuService.validateResponseWithCode(mockResponse);

        // Verifica que se haya llamado al método correcto y se haya obtenido el resultado esperado
        assertNotNull(result);
        // Puedes agregar más verificaciones según lo necesites
    }

    @Test(expected = DigitalMenuProviderServiceException.class)
    public void testValidateResponseWithCode_Status422() {
        // Simula una respuesta con código de estado 422
        Response mockResponse = mock(Response.class);
        when(mockResponse.getStatus()).thenReturn(Status.UNPROCESSABLE_ENTITY.getStatusCode());

        // Simula el cuerpo de la respuesta
        DigitalMenuErrorWithParamsResponse mockBody = new DigitalMenuErrorWithParamsResponse();
        when(mockResponse.readEntity(DigitalMenuErrorWithParamsResponse.class)).thenReturn(mockBody);

        // Llama al método que se está probando y espera una excepción
        digitalMenuService.validateResponseWithCode(mockResponse);
    }

    @Test(expected = DigitalMenuProviderServiceException.class)
    public void testValidateResponseWithCode_Status401() {
        // Simula una respuesta con código de estado 401
        Response mockResponse = mock(Response.class);
        when(mockResponse.getStatus()).thenReturn(Status.UNAUTHORIZED.getStatusCode());

        // Simula el cuerpo de la respuesta
        DigitalMenuErrorResponse mockBody = new DigitalMenuErrorResponse();
        when(mockResponse.readEntity(DigitalMenuErrorResponse.class)).thenReturn(mockBody);

        // Llama al método que se está probando y espera una excepción
        digitalMenuService.validateResponseWithCode(mockResponse);
    }
