private DigitalMenuResponse validateResponseWithCode(final Response response){

        final DigitalMenuErrorResponse digitalMenuErrorResponse;
        switch(response.getStatus()){
        case 200:
            final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
            return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
        case 422:
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response
                    .readEntity(DigitalMenuErrorWithParamsResponse.class);
            throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse,
                    response.getStatus());
        case 401:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                    DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);

        case 403:
            digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR,
                    digitalMenuErrorResponse.getDetail(), response.getStatus());

        case 404:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                    DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
        case 502:
        case 503:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
        default:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);

        }
    }

    private AllergensResponse validateAllergensResponse(final Response response){

        switch(response.getStatus()){
        case 200:
            final AllergensIBDPResponse allergensIBDPResponse = response.readEntity(
                    AllergensIBDPResponse.class);
            return allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse);
        case 422:
        case 412:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, LANGUAGE_NOT_FOUND,
                    response.getStatus());
        case 401:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR,
                    "UNAUTHORIZED", 401);
        case 403:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, "UNAUTHORIZED",
                    403);
        default:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
        }
    }











private DigitalMenuResponse validateResponseWithCode(final Response response) {
    final int status = response.getStatus();
    final DigitalMenuErrorResponse digitalMenuErrorResponse;

    switch (status) {
        case 200:
            return handle200Response(response);
        case 422:
            handle422Response(response);
        case 401:
            handle401Response(response);
        case 403:
            handle403Response(response);
        case 404:
            handle404Response(response);
        case 502:
        case 503:
            handle5xxResponse(response);
        default:
            handleDefaultResponse(response);
    }
    return null; // Nunca debería llegar aquí
}

private DigitalMenuResponse handle200Response(final Response response) {
    final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
    return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
}

private void handle422Response(final Response response) {
    final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response.readEntity(DigitalMenuErrorWithParamsResponse.class);
    throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse, response.getStatus());
}

private void handle401Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
            DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);
}

private void handle403Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
    throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, digitalMenuErrorResponse.getDetail(), response.getStatus());
}

private void handle404Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
            DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
}

private void handle5xxResponse(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
}

private void handleDefaultResponse(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);
}












package com.ib.captwo.ibdp.favl.coreservice.impl;

import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorDetailResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorWithParamsResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuIBDPResponse;
import com.ib.captwo.ibdp.favl.api.domain.allergens.AllergensIBDPResponse;
import com.ib.captwo.ibdp.favl.converters.DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
import com.ib.captwo.ibdp.favl.converters.allergens.AllegernsIBDPResponseIntoAllergensResponseConverter;
import com.ib.captwo.ibdp.favl.coreservice.clients.DigitalMenuRSClient;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuErrorCodes;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuProviderServiceException;
import com.ib.captwo.ibdp.favl.kpi.digitalmenu.KpiDigitalMenuProviderGenerator;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.DigitalMenuProvider;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.DigitalMenuUtils;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuFlightRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuProviderRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuProviderResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.allergens.AllergensResponse;
import com.ib.framework.domain.Realm;
import com.ib.framework.exception.IBBusinessException;
import com.ib.framework.logging.core.KpiLog;
import com.ib.framework.logging.core.KpiType;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.DependsOn;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import javax.ws.rs.BadRequestException;
import javax.ws.rs.client.ClientException;
import javax.ws.rs.core.Response;
import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;

@Component
@DependsOn("digitalMenuRSClient")
public class DigitalMenuProviderServiceImpl implements DigitalMenuProvider{

    private static final String ERROR_FORMAT = "%s -> %s";
    private static final String LANGUAGE_NOT_FOUND = "Language not indicated";
    private final String apiKey;

    private final DigitalMenuUtils digitalMenuUtils;
    private final DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter digitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
    private final AllegernsIBDPResponseIntoAllergensResponseConverter allegernsIBDPResponseIntoAllergensResponseConverter;

    @Resource(name = "digitalMenuRSClient")
    private final DigitalMenuRSClient digitalMenuRSClient;

    @Autowired
    public DigitalMenuProviderServiceImpl(final DigitalMenuUtils digitalMenuUtils,
                                          @Qualifier("digitalMenuRSClient") final DigitalMenuRSClient digitalMenuRSClient,
                                          @Qualifier("digitalMenuIBDPResponseIntoDigitalMenuResponseConverter") final DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter digitalMenuIBDPResponseIntoDigitalMenuResponseConverter,
                                          @Qualifier("allegernsIBDPResponseIntoAllergensResponseConverter") final AllegernsIBDPResponseIntoAllergensResponseConverter allegernsIBDPResponseIntoAllergensResponseConverter,
                                          @Value("${com.ib.captwo.ibdp.favl.service.endpoint.appKey}") final String apiKey){
        this.digitalMenuUtils = digitalMenuUtils;
        this.digitalMenuRSClient = digitalMenuRSClient;
        this.digitalMenuIBDPResponseIntoDigitalMenuResponseConverter = digitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
        this.allegernsIBDPResponseIntoAllergensResponseConverter = allegernsIBDPResponseIntoAllergensResponseConverter;
        this.apiKey = apiKey;
    }

    @Override
    @KpiLog(operation = "getDigitalMenus", service = "digitalMenuService", kpi = KpiDigitalMenuProviderGenerator.class,
            type = KpiType.KPI_ERROR, realm = Realm.Booking, stacktraceLength = 0)
    public DigitalMenuProviderResponse getDigitalMenu(final DigitalMenuProviderRequest digitalMenuProviderRequest){
        final List<DigitalMenuResponse> digitalMenuResponseList = new ArrayList<>();
        for(final DigitalMenuFlightRequest digitalMenuFlightRequest : digitalMenuProviderRequest
                .getDigitalMenuFlightList()){
            callIBDPClient(digitalMenuResponseList, digitalMenuFlightRequest);
        }
        return DigitalMenuProviderResponse.builder().withDigitalMenuResponseList(digitalMenuResponseList).build();
    }

    @Override
    @KpiLog(operation = "getAllergens", service = "digitalMenuService", kpi = KpiDigitalMenuProviderGenerator.class,
            type = KpiType.KPI_ERROR, realm = Realm.Booking, stacktraceLength = 0)
    public AllergensResponse getAllergens(final String language){
        try{
            final Response response = digitalMenuRSClient.getAllergens(language, apiKey);
            return validateAllergensResponse(response);
        }catch(final BadRequestException badRequest){
            throw new IBBusinessException(DigitalMenuErrorCodes.BAD_REQUEST, badRequest);
        }catch(final ClientException ce){
            handleSocketTimeoutException(ce);
            handleConnectException(ce);
        }

        return null;
    }

    private void callIBDPClient(final List<DigitalMenuResponse> digitalMenuResponseList,
                                final DigitalMenuFlightRequest digitalMenuFlightRequest){
        final DigitalMenuResponse digitalMenuResponse;
        try{
            String cabin = null;
            if(digitalMenuFlightRequest.getCabin() != null){
                cabin = digitalMenuFlightRequest.getCabin().name();
            }
            final Response response = digitalMenuRSClient.getDigitalMenus(digitalMenuFlightRequest.getCompany(),
                    getFlightNumber(digitalMenuFlightRequest.getNumber()),
                    transformLocalDateToString(digitalMenuFlightRequest.getDepartureDate()), cabin,
                    digitalMenuUtils.getLanguage(), apiKey);

            digitalMenuResponse = validateResponseWithCode(response);
            digitalMenuResponseList.add(digitalMenuResponse);
        }catch(final BadRequestException badRequest){
            throw new IBBusinessException(DigitalMenuErrorCodes.BAD_REQUEST, badRequest);
        }catch(final ClientException ce){
            handleSocketTimeoutException(ce);
            handleConnectException(ce);
        }
    }

    private void handleSocketTimeoutException(final ClientException ce){
        if(ce.getCause() instanceof SocketTimeoutException){
            throw new IBBusinessException(DigitalMenuErrorCodes.REQUEST_TIMEOUT);
        }
    }

    private void handleConnectException(final ClientException ce){
        if(ce.getCause() instanceof ConnectException){
            throw new IBBusinessException(DigitalMenuErrorCodes.BAD_GATEWAY);
        }
    }

    private String transformLocalDateToString(final LocalDate date){
        if(date != null){
            try{
                final DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd");
                return fmt.print(date);
            }catch(final IllegalArgumentException e){
                return null;
            }
        }
        return null;
    }

    private String getFlightNumber(final String flightNumber){
        String formattedFlightNumber = flightNumber;
        if(flightNumber.length() < 4){
            formattedFlightNumber = String.format("%04d", Integer.valueOf(flightNumber));
        }
        return formattedFlightNumber;
    }

    /**
     * Map bad request from IBDPErrorCode to DigitalMenuErrorCode
     * @param digitalMenuErrorWithParamsResponse Response from IBDP (with error code)
     * @param responseStatus HTTP code from IBDP
     * */
    private DigitalMenuProviderServiceException getDigitalMenuProviderServiceBadRequestException(
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse, final int responseStatus){
        final StringBuilder description = new StringBuilder();
        for(final DigitalMenuErrorDetailResponse digitalMenuErrorDetailResponse : digitalMenuErrorWithParamsResponse
                .getDetails()){
            if(description.length() > 0){
                description.append(" / ");
            }
            description.append(digitalMenuErrorDetailResponse.getMsg()).append(": ")
                    .append(digitalMenuErrorDetailResponse.getLoc()[1]).append(", ")
                    .append(digitalMenuErrorDetailResponse.geType());
        }
        return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, description.toString(),
                responseStatus);
    }

    /* *********************************************************************
     *  Methods to map response of IBDP (with error structure with code)
     * ********************************************************************* */
    private DigitalMenuResponse validateResponseWithCode(final Response response){

        switch(response.getStatus()){
            case 200:
                return digitalMenuHandleStatus200(response);
            case 422:
                return digitalMenuHandleStatus422(response);
            case 401:
                return digitalMenuHandleStatus401(response);
            case 403:
                return digitalMenuHandleStatus403(response);
            case 404:
                return digitalMenuHandleStatus404(response);
            case 502:
            case 503:
                return digitalMenuHandleStatus50X(response);
            default:
                return digitalMenuHandleUnknowStatus(response);
        }
    }

    private DigitalMenuResponse digitalMenuHandleStatus200(Response response){
        final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
        return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
    }
    private DigitalMenuResponse digitalMenuHandleStatus422(Response response){
        final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response
                .readEntity(DigitalMenuErrorWithParamsResponse.class);
        throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse,
                response.getStatus());
    }

    private DigitalMenuResponse digitalMenuHandleStatus401(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);
    }
    private DigitalMenuResponse digitalMenuHandleStatus403(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR,
                digitalMenuErrorResponse.getDetail(), response.getStatus());
    }
    private DigitalMenuResponse digitalMenuHandleStatus404(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
    }
    private DigitalMenuResponse digitalMenuHandleStatus50X(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
    }
    private DigitalMenuResponse digitalMenuHandleUnknowStatus(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);
    }

    private AllergensResponse validateAllergensResponse(final Response response){

        switch(response.getStatus()){
            case 200:
                return allergensHandleStatus200(response);
            case 422:
            case 412:
                return allergensHandleStatus4X2(response);
            case 401:
                return allergensHandleStatus401();
            case 403:
                return allergensHandleStatus403();
            default:
                return allergensUnknowStatus(response);
        }
    }
    private AllergensResponse allergensHandleStatus200(Response response){
        final AllergensIBDPResponse allergensIBDPResponse = response.readEntity(AllergensIBDPResponse.class);
        return allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse);
    }
    private AllergensResponse allergensHandleStatus4X2(Response response){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, LANGUAGE_NOT_FOUND,
                response.getStatus());
    }
    private AllergensResponse allergensHandleStatus401(){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR,
                "UNAUTHORIZED", 401);
    }
    public AllergensResponse allergensHandleStatus403(){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, "UNAUTHORIZED",
                403);
    }
    private AllergensResponse allergensUnknowStatus(Response response){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
    }

    private DigitalMenuProviderServiceException throwExceptionErrorResponse(
            final DigitalMenuErrorResponse digitalMenuErrorResponse, final int status){
        if(digitalMenuErrorResponse == null){
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), status);
        }else {
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, status,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR);
        }
    }

    private DigitalMenuErrorResponse readDigitalMenuErrorResponse(final Response response){
        try{
            return response.readEntity(DigitalMenuErrorResponse.class);
        }catch(final Exception e){
            return null;
        }
    }

    /**
     * Map error from IBDPErrorCode to DigitalMenuErrorCode
     * @param digitalMenuErrorResponse Response from IBDP (with error code)
     * @param responseStatus HTTP code from IBDP
     * */
    private DigitalMenuProviderServiceException getDigitalMenuProviderServiceException(
            final DigitalMenuErrorResponse digitalMenuErrorResponse,
            final int responseStatus, final DigitalMenuErrorCodes digitalMenuResultErrorCode){

        if(digitalMenuErrorResponse == null){
            return new DigitalMenuProviderServiceException(digitalMenuResultErrorCode, null, responseStatus);
        }

        // Check Map DigitalMenuErrorCode Code for IBDPErrorCode
        final DigitalMenuErrorCodes digitalMenuErrorCodes = DigitalMenuErrorCodes.IBDPErrorCode
                .getDigitalMenuErrorCode(digitalMenuErrorResponse.getErrorDetails().getErrorCode());
        if(digitalMenuErrorCodes == null){
            // IBDPErrorCode not mapped throw UNEXPECTED_ERROR
            return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), responseStatus);
        }

        return new DigitalMenuProviderServiceException(digitalMenuErrorCodes,
                String.format(ERROR_FORMAT, digitalMenuErrorResponse.getErrorDetails().getErrorCode(),
                        digitalMenuErrorResponse.getErrorDetails().getMessage()), responseStatus);
    }

    private DigitalMenuProviderServiceException getDefaultDigitalMenuProviderServiceException(
            final DigitalMenuErrorResponse digitalMenuErrorResponse, final Response response){

        //Backward compatibility old error structure
        if(digitalMenuErrorResponse != null && digitalMenuErrorResponse.getErrorDetails() == null){
            return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    response.readEntity(String.class), response.getStatus());
        }else {
            if(digitalMenuErrorResponse == null){
                return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                        DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
            }else {
                return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                        digitalMenuErrorResponse.getErrorDetails().getErrorCode() + ": " + digitalMenuErrorResponse
                                .getErrorDetails().getErrorCode(), response.getStatus());
            }
        }
    }
}











package com.ib.captwo.ibdp.favl.coreservice.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorWithParamsResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuIBDPResponse;
import com.ib.captwo.ibdp.favl.api.domain.allergens.AllergensIBDPResponse;
import com.ib.captwo.ibdp.favl.converters.DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
import com.ib.captwo.ibdp.favl.converters.allergens.AllegernsIBDPResponseIntoAllergensResponseConverter;
import com.ib.captwo.ibdp.favl.coreservice.clients.DigitalMenuRSClient;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuErrorCodes;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuProviderServiceException;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.CabinType;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.DigitalMenuUtils;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuFlightRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuProviderRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuProviderResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.allergens.AllergensResponse;
import com.ib.framework.exception.IBBusinessException;
import com.ib.framework.utils.rest.CapTwoJackson2ObjectMapperFactory;
import org.apache.commons.io.IOUtils;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.i18n.LocaleContextHolder;

import javax.ws.rs.client.ClientException;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.util.Collections;
import java.util.Locale;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DigitalMenuProviderServiceImplTest{

    private static final String ERROR_FORMAT = "%s -> %s";
    private static final String COMPANY = "IB";
    private static final String NUMBER = "248";
    private static final String FORMATTED_NUMBER = "0248";
    private static final LocalDate DEPARTURE_LOCAL_DATE = LocalDate.now();
    private final String DEPARTURE_DATE = transformLocalDateToString();
    private static final String API_KEY = "apiKey";

    private final DigitalMenuUtils digitalMenuUtils = mock(DigitalMenuUtils.class);
    private final DigitalMenuRSClient digitalMenuRSClient = mock(DigitalMenuRSClient.class);
    private final DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter digitalMenuIBDPResponseIntoDigitalMenuResponseConverter = mock(
            DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter.class);

    private final AllegernsIBDPResponseIntoAllergensResponseConverter allegernsIBDPResponseIntoAllergensResponseConverter = mock(
            AllegernsIBDPResponseIntoAllergensResponseConverter.class);

    protected DigitalMenuProviderServiceImpl service;
    private final Locale locale = new Locale("es", "ES");

    @Before
    public void setUp(){
        service = new DigitalMenuProviderServiceImpl(digitalMenuUtils, digitalMenuRSClient,
                digitalMenuIBDPResponseIntoDigitalMenuResponseConverter,
                allegernsIBDPResponseIntoAllergensResponseConverter, API_KEY);
        when(digitalMenuUtils.getLanguage()).thenReturn("es");
        LocaleContextHolder.setLocale(locale);
    }

    @Test
    public void shouldCallRSClient_WhenAskedToDigitalMenu(){

        final DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

        final DigitalMenuIBDPResponse digitalMenuIBDPResponse = openStreamFromFile("/json/digitalMenuIBDPResponse.json",
                DigitalMenuIBDPResponse.class);

        final DigitalMenuResponse expectedResponse = mock(DigitalMenuResponse.class);
        when(digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse))
                .thenReturn(expectedResponse);

        final Response responseOk = mock(Response.class);
        when(responseOk.getStatus()).thenReturn(Response.Status.OK.getStatusCode());
        when(responseOk.readEntity(DigitalMenuIBDPResponse.class)).thenReturn(digitalMenuIBDPResponse);

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(responseOk);

        //when
        final DigitalMenuProviderResponse result = service.getDigitalMenu(digitalMenuProviderRequest);

        //then
        assertThat(result.getDigitalMenuResponseList().get(0), is(expectedResponse));
    }

    @Test
    public void shouldCallRSClient_WhenAskedToGetAllergen(){
        //given
        final AllergensIBDPResponse allergensIBDPResponse = mock(AllergensIBDPResponse.class);
        final AllergensResponse expectedResponse = mock(AllergensResponse.class);
        final Response responseOk = mock(Response.class);
        when(allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse))
                .thenReturn(expectedResponse);
        when(responseOk.getStatus()).thenReturn(Response.Status.OK.getStatusCode());
        when(responseOk.readEntity(AllergensIBDPResponse.class)).thenReturn(allergensIBDPResponse);
        when(digitalMenuRSClient.getAllergens(
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(responseOk);
        //when
        final AllergensResponse result = service.getAllergens(LocaleContextHolder.getLocale().getLanguage());
        //then
        assertThat(result, is(expectedResponse));
    }

    @Test
    public void shouldReturnUnauthorizedError_WhenAskedToToDigitalMenuWithWrongAuthenticationDataThatProvokeUnauthorizedResponseV2(){

        final DigitalMenuErrorResponse digitalMenuErrorResponse = openStreamFromFile(
                "/json/digitalMenuIBDPUnauthorizedV2.json", DigitalMenuErrorResponse.class);

        final String expectedDescription = getExpectedDescriptionFromDigitalMenuErrorResponse(digitalMenuErrorResponse);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(Response.Status.UNAUTHORIZED.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(digitalMenuErrorResponse);

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(response);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.FLIGHT_NOT_FOUND, expectedDescription);
    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvoquesNotFoundAndErrorCodeIsNotMappedResponseV2(){

        final DigitalMenuErrorResponse digitalMenuErrorResponse = openStreamFromFile(
                "/json/digitalMenuIBDPNotFoundWithInvalidErrorCodeV2.json", DigitalMenuErrorResponse.class);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(Response.Status.NOT_FOUND.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(digitalMenuErrorResponse);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription());
    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvokeServiceUnavailableAndReadEntityIsNullResponseV2(){
        final Response response = buildResponseWithStatusAndTestEntity(Response.Status.SERVICE_UNAVAILABLE);
        callServiceAndExpectedException(response, DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription());
    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvokeNotFoundAndReadEntityIsNullResponseV2(){
        final Response response = buildResponseWithStatusAndTestEntity(Response.Status.NOT_FOUND);
        callServiceAndExpectedException(response, DigitalMenuErrorCodes.FLIGHT_NOT_FOUND, null);
    }

    private Response buildResponseWithStatusAndTestEntity(final Response.Status status){
        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(status.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(null);
        when(response.readEntity(String.class)).thenReturn("TEST");
        return response;
    }

    @Test
    public void shouldReturnRESTResponseError_WhenAskedToDigitalMenuWithWrongDataThatProvoquesBadRequestResponse(){

        final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = openStreamFromFile(
                "/json/digitalMenuIBDPBadRequest.json", DigitalMenuErrorWithParamsResponse.class);

        final String expectedDescription = buildExpectedDescription(digitalMenuErrorWithParamsResponse);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(422);
        when(response.readEntity(DigitalMenuErrorWithParamsResponse.class))
                .thenReturn(digitalMenuErrorWithParamsResponse);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.BAD_REQUEST, expectedDescription);

    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenInternalServerError(){

        final String expectedDescription = DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription();

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());
        when(response.readEntity(String.class)).thenReturn(expectedDescription);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.UNEXPECTED_ERROR, expectedDescription);
    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenInternalServerErrorV2(){
        baseReturnExpectedErrorAndDescription("/json/digitalMenuIBDPBadGatewayV2.json", Response.Status.BAD_GATEWAY,
                DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);

    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvoquesNotFoundResponseV2(){
        baseReturnExpectedErrorAndDescription("/json/digitalMenuIBDPNotFoundV2.json", Response.Status.NOT_FOUND,
                DigitalMenuErrorCodes.CABIN_NOT_ALLOWED);
    }

    private void baseReturnExpectedErrorAndDescription(final String file, final Response.Status statusExpected,
            final DigitalMenuErrorCodes errorExpected){

        final DigitalMenuErrorResponse digitalMenuErrorResponse = openStreamFromFile(file,
                DigitalMenuErrorResponse.class);

        final String expectedDescription = getExpectedDescriptionFromDigitalMenuErrorResponse(digitalMenuErrorResponse);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(statusExpected.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(digitalMenuErrorResponse);

        callServiceAndExpectedException(response, errorExpected, expectedDescription);

    }

    private String getExpectedDescriptionFromDigitalMenuErrorResponse(
            final DigitalMenuErrorResponse digitalMenuErrorResponse){
        return String.format(ERROR_FORMAT, digitalMenuErrorResponse.getErrorDetails().getErrorCode(),
                digitalMenuErrorResponse.getErrorDetails().getMessage());
    }

    private void callServiceAndExpectedException(final Response responseExpected,
            final DigitalMenuErrorCodes errorExpected, final String descriptionExpected){

        final DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(responseExpected);

        try{
            service.getDigitalMenu(digitalMenuProviderRequest);
        }catch(final Exception e){
            final DigitalMenuProviderServiceException exception = (DigitalMenuProviderServiceException) e;
            assertThat(exception.getErrorCode(), is(errorExpected.getErrorCode()));
            assertThat(exception.getErrorDescription(), is(errorExpected.getErrorDescription()));
            assertThat(exception.getDescription(), is(descriptionExpected));
        }

    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenBadRequestException(){
        baseWhenDigitalMenuClientThrowException(new javax.ws.rs.BadRequestException(),
                DigitalMenuErrorCodes.BAD_REQUEST);
    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenClientException(){
        baseWhenDigitalMenuClientThrowException(new ClientException(new SocketTimeoutException()),
                DigitalMenuErrorCodes.REQUEST_TIMEOUT);
    }

    private void baseWhenDigitalMenuClientThrowException(final Exception exceptionThrown,
            final DigitalMenuErrorCodes expetectedError){
        final DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenThrow(exceptionThrown);

        try{
            service.getDigitalMenu(digitalMenuProviderRequest);
        }catch(final IBBusinessException exception){
            assertThat(exception.getErrorCode(), is(expetectedError.getErrorCode()));
        }
    }

    private String buildExpectedDescription(
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse){
        return digitalMenuErrorWithParamsResponse.getDetails().get(0).getMsg() + ": "
                + digitalMenuErrorWithParamsResponse.getDetails().get(0).getLoc()[1] + ", "
                + digitalMenuErrorWithParamsResponse.getDetails().get(0).geType() + " / "
                + digitalMenuErrorWithParamsResponse.getDetails().get(1).getMsg() + ": "
                + digitalMenuErrorWithParamsResponse.getDetails().get(1).getLoc()[1] + ", "
                + digitalMenuErrorWithParamsResponse.getDetails().get(1).geType();
    }

    private DigitalMenuProviderRequest mockDigitalMenuProviderRequest(){
        final DigitalMenuProviderRequest digitalMenuProviderRequest = mock(DigitalMenuProviderRequest.class);
        final DigitalMenuFlightRequest digitalMenuFlightRequest = mock(DigitalMenuFlightRequest.class);
        when(digitalMenuFlightRequest.getCompany()).thenReturn(COMPANY);
        when(digitalMenuFlightRequest.getNumber()).thenReturn(NUMBER);
        when(digitalMenuFlightRequest.getCabin()).thenReturn(CabinType.BUSINESS);
        when(digitalMenuFlightRequest.getDepartureDate()).thenReturn(DEPARTURE_LOCAL_DATE);
        when(digitalMenuProviderRequest.getDigitalMenuFlightList())
                .thenReturn(Collections.singletonList(digitalMenuFlightRequest));
        return digitalMenuProviderRequest;
    }

    private <T> T openStreamFromFile(final String path, final Class<T> clase){
        final ObjectMapper mapper = CapTwoJackson2ObjectMapperFactory.getInstance();
        T digitalMenuErrorResponse = null;
        try(final InputStream inputStream = DigitalMenuProviderServiceImplTest.class.getResource(path).openStream()){
            digitalMenuErrorResponse = mapper.readValue(IOUtils.toString(inputStream), clase);
        }catch(final IOException ioex){
            fail("Error loading json file");
        }
        return digitalMenuErrorResponse;
    }

    private String transformLocalDateToString(){
        try{
            final DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd");
            return fmt.print(DigitalMenuProviderServiceImplTest.DEPARTURE_LOCAL_DATE);
        }catch(final IllegalArgumentException e){
            return null;
        }
    }
}






@Test(expected = DigitalMenuProviderServiceException.class)
public void shouldHandleHTTP422UnprocessableEntity() {
    // Configurar el mock del DigitalMenuProviderRequest
    DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

    // Simular la respuesta de HTTP 422 con un objeto de error esperado
    DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = openStreamFromFile(
        "/json/digitalMenuIBDPBadRequest.json", DigitalMenuErrorWithParamsResponse.class);

    // Configurar la respuesta del mock
    Response response = mock(Response.class);
    when(response.getStatus()).thenReturn(422);  // HTTP 422
    when(response.readEntity(DigitalMenuErrorWithParamsResponse.class))
        .thenReturn(digitalMenuErrorWithParamsResponse);

    // Configurar el cliente mock para devolver la respuesta simulada
    when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
            LocaleContextHolder.getLocale().getLanguage(), API_KEY))
        .thenReturn(response);

    // Llamar al método que debería lanzar la excepción
    try {
        service.getDigitalMenu(digitalMenuProviderRequest);
        fail("Se esperaba que se lanzara DigitalMenuProviderServiceException");
    } catch (DigitalMenuProviderServiceException e) {
        // Verificar los atributos de la excepción
        assertThat(e.getErrorCode(), is(DigitalMenuErrorCodes.BAD_REQUEST.getErrorCode()));
        assertThat(e.getErrorDescription(), is(DigitalMenuErrorCodes.BAD_REQUEST.getErrorDescription()));
        assertThat(e.getDescription(), is(digitalMenuErrorWithParamsResponse.getDetails().get(0).getMsg()));
        
        // Puedes añadir más aserciones aquí si hay más atributos de la excepción que quieras verificar.
    }
}




/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:/Users/jorge.dr/Downloads/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=49314:/Users/jorge.dr/Downloads/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/jorge.dr/Downloads/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar:/Users/jorge.dr/Downloads/IntelliJ IDEA CE.app/Contents/plugins/junit/lib/junit5-rt.jar:/Users/jorge.dr/Downloads/IntelliJ IDEA CE.app/Contents/plugins/junit/lib/junit-rt.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/charsets.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/cldrdata.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/dnsns.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/jaccess.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/localedata.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/nashorn.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/sunec.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/sunjce_provider.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/sunpkcs11.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/ext/zipfs.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/jce.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/jfr.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/jsse.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/management-agent.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/resources.jar:/Users/jorge.dr/.sdkman/candidates/java/8.0.392-amzn/jre/lib/rt.jar:/Users/jorge.dr/Documents/Iberia/sse-favl/favl-providers/ibdp-favl-provider/target/test-classes:/Users/jorge.dr/Documents/Iberia/sse-favl/favl-providers/ibdp-favl-provider/target/classes:/Users/jorge.dr/.m2/repository/com/ib/framework/utils/3.83.3/utils-3.83.3.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-rs-extension-providers/2.7.15/cxf-rt-rs-extension-providers-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-api/2.7.15/cxf-api-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/codehaus/woodstox/woodstox-core-asl/4.4.1/woodstox-core-asl-4.4.1.jar:/Users/jorge.dr/.m2/repository/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar:/Users/jorge.dr/.m2/repository/org/apache/ws/xmlschema/xmlschema-core/2.1.0/xmlschema-core-2.1.0.jar:/Users/jorge.dr/.m2/repository/org/apache/geronimo/specs/geronimo-javamail_1.4_spec/1.7.1/geronimo-javamail_1.4_spec-1.7.1.jar:/Users/jorge.dr/.m2/repository/wsdl4j/wsdl4j/1.6.3/wsdl4j-1.6.3.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-core/2.7.15/cxf-rt-core-2.7.15.jar:/Users/jorge.dr/.m2/repository/com/sun/xml/bind/jaxb-impl/2.2.7/jaxb-impl-2.2.7.jar:/Users/jorge.dr/.m2/repository/com/sun/xml/bind/jaxb-core/2.2.7/jaxb-core-2.2.7.jar:/Users/jorge.dr/.m2/repository/com/sun/istack/istack-commons-runtime/2.16/istack-commons-runtime-2.16.jar:/Users/jorge.dr/.m2/repository/com/sun/xml/fastinfoset/FastInfoset/1.2.12/FastInfoset-1.2.12.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-frontend-jaxrs/2.7.15/cxf-rt-frontend-jaxrs-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-bindings-xml/2.7.15/cxf-rt-bindings-xml-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-transports-http/2.7.15/cxf-rt-transports-http-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-transports-http-hc/2.7.15/cxf-rt-transports-http-hc-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/httpcomponents/httpasyncclient/4.0-beta3/httpasyncclient-4.0-beta3.jar:/Users/jorge.dr/.m2/repository/org/apache/httpcomponents/httpcore/4.3.2/httpcore-4.3.2.jar:/Users/jorge.dr/.m2/repository/org/apache/httpcomponents/httpcore-nio/4.2.2/httpcore-nio-4.2.2.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.6.3/jackson-jaxrs-json-provider-2.6.3.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.6.3/jackson-jaxrs-base-2.6.3.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.6.3/jackson-module-jaxb-annotations-2.6.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-lang/3.83.3/ib-lang-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-common-serializers/3.83.3/ib-common-serializers-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/captwo-webendpoint-apachecxf/2.0.1/captwo-webendpoint-apachecxf-2.0.1.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/stubo-lib-captwo/1.1.11/stubo-lib-captwo-1.1.11.jar:/Users/jorge.dr/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/captwo-http-client-comms/1.0.2/captwo-http-client-comms-1.0.2.jar:/Users/jorge.dr/.m2/repository/org/springframework/ws/spring-ws-core/2.1.4.RELEASE/spring-ws-core-2.1.4.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-webmvc/3.2.8.RELEASE/spring-webmvc-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-frontend-jaxws/2.7.15/cxf-rt-frontend-jaxws-2.7.15.jar:/Users/jorge.dr/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/jorge.dr/.m2/repository/asm/asm/3.3.1/asm-3.3.1.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-bindings-soap/2.7.15/cxf-rt-bindings-soap-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-databinding-jaxb/2.7.15/cxf-rt-databinding-jaxb-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-frontend-simple/2.7.15/cxf-rt-frontend-simple-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-ws-addr/2.7.15/cxf-rt-ws-addr-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-ws-policy/2.7.15/cxf-rt-ws-policy-2.7.15.jar:/Users/jorge.dr/.m2/repository/org/apache/neethi/neethi/3.0.3/neethi-3.0.3.jar:/Users/jorge.dr/.m2/repository/org/apache/cxf/cxf-rt-transports-local/2.7.15/cxf-rt-transports-local-2.7.15.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/test/captwo-test-utils/3.0.2/captwo-test-utils-3.0.2.jar:/Users/jorge.dr/.m2/repository/net/javacrumbs/smock-http-cxf/0.7/smock-http-cxf-0.7.jar:/Users/jorge.dr/.m2/repository/net/javacrumbs/smock-http-server/0.7/smock-http-server-0.7.jar:/Users/jorge.dr/.m2/repository/net/javacrumbs/smock-extension/0.7/smock-extension-0.7.jar:/Users/jorge.dr/.m2/repository/net/javacrumbs/smock-common/0.7/smock-common-0.7.jar:/Users/jorge.dr/.m2/repository/org/springframework/ws/spring-ws-test/2.1.4.RELEASE/spring-ws-test-2.1.4.RELEASE.jar:/Users/jorge.dr/.m2/repository/net/javacrumbs/smock-http-client/0.7/smock-http-client-0.7.jar:/Users/jorge.dr/.m2/repository/javax/xml/soap/saaj-api/1.3/saaj-api-1.3.jar:/Users/jorge.dr/.m2/repository/javax/jws/jsr181-api/1.0-MR1/jsr181-api-1.0-MR1.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.6.3/jackson-datatype-joda-2.6.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-logging-api/3.83.3/ib-logging-api-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.6.3/jackson-annotations-2.6.3.jar:/Users/jorge.dr/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.0-m10/javax.ws.rs-api-2.0-m10.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/captwo-lang/2.0.23/captwo-lang-2.0.23.jar:/Users/jorge.dr/.m2/repository/org/springframework/ws/spring-xml/2.1.4.RELEASE/spring-xml-2.1.4.RELEASE.jar:/Users/jorge.dr/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/captwo-config/2.0.1/captwo-config-2.0.1.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-web/3.2.8.RELEASE/spring-web-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-jdbc/3.2.8.RELEASE/spring-jdbc-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/iberiaGenClients/iberia-rest-beans-1.0/1.0/iberia-rest-beans-1.0-1.0.jar:/Users/jorge.dr/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/jorge.dr/.m2/repository/commons-codec/commons-codec/1.6/commons-codec-1.6.jar:/Users/jorge.dr/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar:/Users/jorge.dr/.m2/repository/com/sun/xml/bind/jaxb1-impl/2.2.5-5/jaxb1-impl-2.2.5-5.jar:/Users/jorge.dr/.m2/repository/commons-beanutils/commons-beanutils-core/1.8.3/commons-beanutils-core-1.8.3.jar:/Users/jorge.dr/.m2/repository/org/springframework/data/spring-data-redis/1.7.1.RELEASE/spring-data-redis-1.7.1.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/data/spring-data-keyvalue/1.1.1.RELEASE/spring-data-keyvalue-1.1.1.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/data/spring-data-commons/1.12.1.RELEASE/spring-data-commons-1.12.1.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-tx/3.2.8.RELEASE/spring-tx-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-oxm/3.2.8.RELEASE/spring-oxm-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-context-support/3.2.8.RELEASE/spring-context-support-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/redis/clients/jedis/2.9.0/jedis-2.9.0.jar:/Users/jorge.dr/.m2/repository/org/apache/commons/commons-pool2/2.4.2/commons-pool2-2.4.2.jar:/Users/jorge.dr/.m2/repository/org/jsoup/jsoup/1.9.2/jsoup-1.9.2.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-test-utils/3.83.3/ib-test-utils-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-common-model/3.83.3/ib-common-model-3.83.3.jar:/Users/jorge.dr/.m2/repository/joda-time/joda-time/2.10.10/joda-time-2.10.10.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.6.3/jackson-databind-2.6.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/session-terms/session-terms-executor/3.83.3/session-terms-executor-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/rules/3.83.3/rules-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/github/tomakehurst/wiremock/1.57/wiremock-1.57.jar:/Users/jorge.dr/.m2/repository/org/mortbay/jetty/jetty/6.1.26/jetty-6.1.26.jar:/Users/jorge.dr/.m2/repository/org/mortbay/jetty/jetty-util/6.1.26/jetty-util-6.1.26.jar:/Users/jorge.dr/.m2/repository/org/mortbay/jetty/servlet-api/2.5-20081211/servlet-api-2.5-20081211.jar:/Users/jorge.dr/.m2/repository/org/skyscreamer/jsonassert/1.2.3/jsonassert-1.2.3.jar:/Users/jorge.dr/.m2/repository/org/json/json/20090211/json-20090211.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.6.3/jackson-core-2.6.3.jar:/Users/jorge.dr/.m2/repository/org/apache/httpcomponents/httpclient/4.3.3/httpclient-4.3.3.jar:/Users/jorge.dr/.m2/repository/xmlunit/xmlunit/1.5/xmlunit-1.5.jar:/Users/jorge.dr/.m2/repository/com/jayway/jsonpath/json-path/0.9.1/json-path-0.9.1.jar:/Users/jorge.dr/.m2/repository/net/minidev/json-smart/1.2/json-smart-1.2.jar:/Users/jorge.dr/.m2/repository/org/assertj/assertj-core/3.21.0/assertj-core-3.21.0.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-context/3.2.8.RELEASE/spring-context-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-aop/3.2.8.RELEASE/spring-aop-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-beans/3.2.8.RELEASE/spring-beans-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-core/3.2.8.RELEASE/spring-core-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-expression/3.2.8.RELEASE/spring-expression-3.2.8.RELEASE.jar:/Users/jorge.dr/Documents/Iberia/sse-favl/favl-coreservice-api/target/classes:/Users/jorge.dr/Documents/Iberia/sse-favl/favl-providers/datalake-favl-provider/target/classes:/Users/jorge.dr/.m2/repository/com/ib/captwo/sse/avm/avm-provider-api/2.48.0/avm-provider-api-2.48.0.jar:/Users/jorge.dr/.m2/repository/com/ib/captwo/sse/avm/avm-web-client/4.20.4/avm-web-client-4.20.4.jar:/Users/jorge.dr/.m2/repository/com/ba/captwo/framework/captwo-datamapping/1.0.0/captwo-datamapping-1.0.0.jar:/Users/jorge.dr/.m2/repository/com/ib/captwo/sse/orm/orm-web-client/4.56.1/orm-web-client-4.56.1.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-webendpoint-apachecxf/3.83.3/ib-webendpoint-apachecxf-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/language-repository/3.83.3/language-repository-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-oauth2-adapter/3.83.3/ib-oauth2-adapter-3.83.3.jar:/Users/jorge.dr/.m2/repository/org/springframework/security/spring-security-web/3.2.8.RELEASE/spring-security-web-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/security/spring-security-core/3.2.8.RELEASE/spring-security-core-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/security/spring-security-config/3.2.8.RELEASE/spring-security-config-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/keycloak/keycloak-spring-security-adapter/1.6.1.Final/keycloak-spring-security-adapter-1.6.1.Final.jar:/Users/jorge.dr/.m2/repository/org/keycloak/keycloak-core/1.6.1.Final/keycloak-core-1.6.1.Final.jar:/Users/jorge.dr/.m2/repository/org/keycloak/keycloak-common/1.6.1.Final/keycloak-common-1.6.1.Final.jar:/Users/jorge.dr/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.50/bcpkix-jdk15on-1.50.jar:/Users/jorge.dr/.m2/repository/org/keycloak/keycloak-adapter-spi/1.6.1.Final/keycloak-adapter-spi-1.6.1.Final.jar:/Users/jorge.dr/.m2/repository/org/keycloak/keycloak-adapter-core/1.6.1.Final/keycloak-adapter-core-1.6.1.Final.jar:/Users/jorge.dr/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.50/bcprov-jdk15on-1.50.jar:/Users/jorge.dr/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.9.9/jackson-core-asl-1.9.9.jar:/Users/jorge.dr/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.9.9/jackson-mapper-asl-1.9.9.jar:/Users/jorge.dr/.m2/repository/org/codehaus/jackson/jackson-xc/1.9.9/jackson-xc-1.9.9.jar:/Users/jorge.dr/.m2/repository/org/springframework/security/oauth/spring-security-oauth2/2.0.8.RELEASE/spring-security-oauth2-2.0.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/com/ib/captwo/pmt/ppm/ppm-notification-provider-api/3.6.15/ppm-notification-provider-api-3.6.15.jar:/Users/jorge.dr/.m2/repository/com/ib/captwo/bpm/bpm-provider/3.6.6/bpm-provider-3.6.6.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/configuration-repository/3.83.3/configuration-repository-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/rules-repository/3.83.3/rules-repository-3.83.3.jar:/Users/jorge.dr/.m2/repository/iberiaGenClients/iberia-rules/1.1/iberia-rules-1.1.jar:/Users/jorge.dr/.m2/repository/de/odysseus/juel/juel-impl/2.2.5/juel-impl-2.2.5.jar:/Users/jorge.dr/.m2/repository/ojdbc6/com/oracle/ojdbc6/11.2.0.4/ojdbc6-11.2.0.4.jar:/Users/jorge.dr/.m2/repository/cglib/cglib-nodep/3.1/cglib-nodep-3.1.jar:/Users/jorge.dr/.m2/repository/com/github/briandilley/jsonrpc4j/jsonrpc4j/1.1/jsonrpc4j-1.1.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/airline-repository/4.6.5/airline-repository-4.6.5.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/currency-repository/3.6.1/currency-repository-3.6.1.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/assets-data-access/3.83.3/assets-data-access-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-logging-core/3.83.3/ib-logging-core-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/dao-utils/3.83.3/dao-utils-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/github/danielwegener/logback-kafka-appender/0.0.3/logback-kafka-appender-0.0.3.jar:/Users/jorge.dr/.m2/repository/org/apache/kafka/kafka-clients/0.8.2.1/kafka-clients-0.8.2.1.jar:/Users/jorge.dr/.m2/repository/net/jpountz/lz4/lz4/1.2.0/lz4-1.2.0.jar:/Users/jorge.dr/.m2/repository/org/xerial/snappy/snappy-java/1.1.1.6/snappy-java-1.1.1.6.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/data-access-api/3.83.3/data-access-api-3.83.3.jar:/Users/jorge.dr/.m2/repository/oracle/assetapi/1.0/assetapi-1.0.jar:/Users/jorge.dr/.m2/repository/org/liquibase/liquibase-core/3.2.0/liquibase-core-3.2.0.jar:/Users/jorge.dr/.m2/repository/org/apache/velocity/velocity/1.7/velocity-1.7.jar:/Users/jorge.dr/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-servlet/8.1.14.v20131031/jetty-servlet-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-security/8.1.14.v20131031/jetty-security-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-server/8.1.14.v20131031/jetty-server-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/orbit/javax.servlet/3.0.0.v201112011016/javax.servlet-3.0.0.v201112011016.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-continuation/8.1.14.v20131031/jetty-continuation-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-http/8.1.14.v20131031/jetty-http-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-io/8.1.14.v20131031/jetty-io-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/eclipse/jetty/jetty-util/8.1.14.v20131031/jetty-util-8.1.14.v20131031.jar:/Users/jorge.dr/.m2/repository/org/yaml/snakeyaml/1.15/snakeyaml-1.15.jar:/Users/jorge.dr/.m2/repository/com/h2database/h2/1.3.173/h2-1.3.173.jar:/Users/jorge.dr/.m2/repository/com/netflix/hystrix/hystrix-core/1.5.12/hystrix-core-1.5.12.jar:/Users/jorge.dr/.m2/repository/com/netflix/archaius/archaius-core/0.4.1/archaius-core-0.4.1.jar:/Users/jorge.dr/.m2/repository/commons-configuration/commons-configuration/1.8/commons-configuration-1.8.jar:/Users/jorge.dr/.m2/repository/io/reactivex/rxjava/1.2.0/rxjava-1.2.0.jar:/Users/jorge.dr/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/airport-repository/3.7.1/airport-repository-3.7.1.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/common-data-access/3.83.3/common-data-access-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-config/3.83.3/ib-config-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/text-repository/3.2.7/text-repository-3.2.7.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/country-repository/3.83.3/country-repository-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/city-repository/3.6.1/city-repository-3.6.1.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/ib-observations-api/3.83.3/ib-observations-api-3.83.3.jar:/Users/jorge.dr/.m2/repository/com/ib/captwo/dbm/rop/dbm-rop-apiclient/1.0.60/dbm-rop-apiclient-1.0.60.jar:/Users/jorge.dr/.m2/repository/org/springframework/retry/spring-retry/1.1.5.RELEASE/spring-retry-1.1.5.RELEASE.jar:/Users/jorge.dr/.m2/repository/com/ib/framework/data/ff-associated-conditions-repository/3.6.0/ff-associated-conditions-repository-3.6.0.jar:/Users/jorge.dr/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar:/Users/jorge.dr/.m2/repository/org/mapstruct/mapstruct/1.5.1.Final/mapstruct-1.5.1.Final.jar:/Users/jorge.dr/.m2/repository/net/sf/ehcache/ehcache/2.8.1/ehcache-2.8.1.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-test/3.2.8.RELEASE/spring-test-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/com/oracle/ojdbc6/11.2.0.4/ojdbc6-11.2.0.4.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-instrument/3.2.8.RELEASE/spring-instrument-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/springframework/spring-aspects/3.2.8.RELEASE/spring-aspects-3.2.8.RELEASE.jar:/Users/jorge.dr/.m2/repository/org/aspectj/aspectjweaver/1.7.4/aspectjweaver-1.7.4.jar:/Users/jorge.dr/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:/Users/jorge.dr/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.7/jcl-over-slf4j-1.7.7.jar:/Users/jorge.dr/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.7/log4j-over-slf4j-1.7.7.jar:/Users/jorge.dr/.m2/repository/org/slf4j/jul-to-slf4j/1.7.7/jul-to-slf4j-1.7.7.jar:/Users/jorge.dr/.m2/repository/ch/qos/logback/logback-classic/1.1.2/logback-classic-1.1.2.jar:/Users/jorge.dr/.m2/repository/ch/qos/logback/logback-core/1.1.2/logback-core-1.1.2.jar:/Users/jorge.dr/.m2/repository/ch/qos/logback/logback-access/1.1.2/logback-access-1.1.2.jar:/Users/jorge.dr/.m2/repository/org/hibernate/hibernate-validator/5.1.0.Final/hibernate-validator-5.1.0.Final.jar:/Users/jorge.dr/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar:/Users/jorge.dr/.m2/repository/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar:/Users/jorge.dr/.m2/repository/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar:/Users/jorge.dr/.m2/repository/javax/el/javax.el-api/2.2.4/javax.el-api-2.2.4.jar:/Users/jorge.dr/.m2/repository/org/glassfish/web/javax.el/2.2.4/javax.el-2.2.4.jar:/Users/jorge.dr/.m2/repository/com/google/guava/guava/14.0.1/guava-14.0.1.jar:/Users/jorge.dr/.m2/repository/org/mockito/mockito-core/1.9.5/mockito-core-1.9.5.jar:/Users/jorge.dr/.m2/repository/org/kubek2k/springockito/1.0.9/springockito-1.0.9.jar:/Users/jorge.dr/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/jorge.dr/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/Users/jorge.dr/.m2/repository/junit/junit/4.11/junit-4.11.jar:/Users/jorge.dr/.m2/repository/org/powermock/powermock-module-junit4/1.5.4/powermock-module-junit4-1.5.4.jar:/Users/jorge.dr/.m2/repository/org/powermock/powermock-module-junit4-common/1.5.4/powermock-module-junit4-common-1.5.4.jar:/Users/jorge.dr/.m2/repository/org/powermock/powermock-core/1.5.4/powermock-core-1.5.4.jar:/Users/jorge.dr/.m2/repository/org/javassist/javassist/3.18.1-GA/javassist-3.18.1-GA.jar:/Users/jorge.dr/.m2/repository/org/powermock/powermock-reflect/1.5.4/powermock-reflect-1.5.4.jar:/Users/jorge.dr/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/jorge.dr/.m2/repository/org/powermock/powermock-api-mockito/1.5.4/powermock-api-mockito-1.5.4.jar:/Users/jorge.dr/.m2/repository/org/powermock/powermock-api-support/1.5.4/powermock-api-support-1.5.4.jar:/Users/jorge.dr/.m2/repository/org/databene/contiperf/2.2.0/contiperf-2.2.0.jar:/Users/jorge.dr/.m2/repository/net/sourceforge/pro-grade/pro-grade/1.1.1/pro-grade-1.1.1.jar:/Users/jorge.dr/.m2/repository/org/jacoco/org.jacoco.agent/0.7.5.201505241946/org.jacoco.agent-0.7.5.201505241946-runtime.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.ib.captwo.ibdp.favl.coreservice.impl.DigitalMenuProviderServiceImplTest,shouldHandleHTTP422UnprocessableEntity

java.lang.Exception: Unexpected exception, expected<com.ib.captwo.ibdp.favl.exceptions.DigitalMenuProviderServiceException> but was<java.lang.AssertionError>

	at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: java.lang.AssertionError: 
Expected: is "field required"
     but: was "field required: company, value_error.missing / field required: number, value_error.missing"
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.junit.Assert.assertThat(Assert.java:865)
	at org.junit.Assert.assertThat(Assert.java:832)
	at com.ib.captwo.ibdp.favl.coreservice.impl.DigitalMenuProviderServiceImplTest.shouldHandleHTTP422UnprocessableEntity(DigitalMenuProviderServiceImplTest.java:351)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)
	... 17 more


Process finished with exit code 255

