package com.notification.app.decorator;

import com.notification.app.model.Flight;
import com.notification.app.model.User;

public interface Notificator {
    void send(User user, Flight flight);
}

import com.notification.app.model.Flight;
import com.notification.app.model.User;

import static com.notification.app.formatter.FormatterPrint.printNotification;

public class EmailMessageBase implements Notificator {
    private static final String EMAIL_MESSAGE= "Message received by email";


    @Override
    public void send(User user, Flight flight) {
        printNotification(flight, user, EMAIL_MESSAGE);
    }
}

ackage com.notification.app.decorator;

import com.notification.app.model.Flight;
import com.notification.app.model.User;

import static com.notification.app.formatter.FormatterPrint.printNotification;

public class SmsMessage extends EmailMessageBase {
    private static final String SMS_MESSAGE = "Message received by sms";

    public SmsMessage() {
        super();
    }

    @Override
    public void send(User user, Flight flight) {
        super.send(user, flight);
        printNotification(flight, user, SMS_MESSAGE);
    }
}
package com.notification.app.decorator;

import com.notification.app.model.Flight;
import com.notification.app.model.User;

import static com.notification.app.formatter.FormatterPrint.printNotification;

public class WhatsappMessage extends SmsMessage{
    private static final String WHATSAPP_MESSAGE = "Message received by Whatsapp";


    public WhatsappMessage() {
    }

    @Override
    public void send(User user, Flight flight) {
        super.send(user, flight);
        printNotification(flight, user, WHATSAPP_MESSAGE);
    }
}
import com.notification.app.model.Flight;
import com.notification.app.model.User;

import static com.notification.app.model.Flight.formatterDateTime;

public class FormatterPrint {

    public static void printNotification(Flight flight, User user , String messageSend) {
        System.out.println("Estimado "+ user.getName() +" ," +
                " le informamos que el vuelo "+flight.getFlightNumber()+" de la aerolinea " +flight.getAirlineName()+
                " desde el aeropuerto de "+flight.getDepartureAirportName() +" con destino a " +
                flight.getArrivalAirportName() +" programado para el dia  " +flight.getDepartureEstimatedDayOfMonth()+
                "\na las "+formatterDateTime(flight.getDepartureCurrent())+" ha sufrido un cambio . Los nuevos datos son "+flight.toString()+
                ". El vuelo ha cambiado " + formatterDateTime(flight.getDepartureEstimated())+". " + messageSend);
    }
}

package com.notification.app.model;

import com.notification.app.decorator.Notificator;
import com.notification.app.formatter.FormatterPrint;
import com.notification.app.observer.ObservableCustom;
import com.notification.app.observer.ObserverCustom;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;

import java.util.logging.Logger;

import static com.notification.app.formatter.FormatterPrint.printNotification;

public class User implements ObserverCustom {

    @Getter
    String name;
    Notificator notificator;

    public User(String name, Notificator notificator) {
        this.name = name;
        this.notificator = notificator;
    }

    @Override
    public void update(ObservableCustom o, Object arg) {
        Flight flight = (Flight) o;
        notificator.send(this, flight);
    }
}
package com.notification.app.model;

import com.notification.app.observer.ObservableCustom;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class Flight extends ObservableCustom{

    private Airline airline;
    private String flightNumber;
    private FlightStatus status;
    private LocalDateTime departureEstimated;
    private LocalDateTime arrivalEstimated;
    private LocalDateTime arrivalCurrent;
    private LocalDateTime departureCurrent;
    private Airport departureAirport;
    private Airport arrivalAirport;

    public Flight(Airline airline, String flightNumber, FlightStatus status, LocalDateTime departureEstimated, LocalDateTime arrivalEstimated, LocalDateTime arrivalCurrent, LocalDateTime departureCurrent, Airport departureAirport, Airport arrivalAirport) {
        this.airline = airline;
        this.flightNumber = flightNumber;
        this.status = status;
        this.departureEstimated = departureEstimated;
        this.arrivalEstimated = arrivalEstimated;
        this.arrivalCurrent = arrivalCurrent;
        this.departureCurrent = departureCurrent;
        this.departureAirport = departureAirport;
        this.arrivalAirport = arrivalAirport;
    }

    private Flight(){}

    public String getAirlineName (){
        return airline.getName();
    }

    public String getDepartureAirportName (){
        return departureAirport.getName();
    }
    public String getArrivalAirportName (){
        return arrivalAirport.getName();
    }

    public void setAirline(Airline airline) {
        this.airline = airline;
    }

    public void setFlightNumber(String flightNumber) {
        this.flightNumber = flightNumber;
    }

    public void setStatus(FlightStatus status) {
        this.status = status;
    }

    public void setDepartureEstimated(LocalDateTime departureEstimated) {
        this.departureEstimated = departureEstimated;
    }

    public void setArrivalEstimated(LocalDateTime arrivalEstimated) {
        this.arrivalEstimated = arrivalEstimated;
    }

    public void setArrivalCurrent(LocalDateTime arrivalCurrent) {
        this.arrivalCurrent = arrivalCurrent;
    }

    public void setDepartureCurrent(LocalDateTime departureCurrent) {
        this.departureCurrent = departureCurrent;
    }

    public void setDepartureAirport(Airport departureAirport) {
        this.departureAirport = departureAirport;
    }

    public void setArrivalAirport(Airport arrivalAirport) {
        this.arrivalAirport = arrivalAirport;
    }

    public Airline getAirline() {
        return airline;
    }

    public String getFlightNumber() {
        return flightNumber;
    }

    public FlightStatus getStatus() {
        return status;
    }

    public LocalDateTime getDepartureEstimated() {
        return departureEstimated;
    }

    public int getDepartureEstimatedDayOfMonth() {
        return departureEstimated.getDayOfMonth();
    }

    public LocalDateTime getArrivalEstimated() {
        return arrivalEstimated;
    }

    public LocalDateTime getArrivalCurrent() {
        return arrivalCurrent;
    }

    public LocalDateTime getDepartureCurrent() {
        return departureCurrent;
    }

    public Airport getDepartureAirport() {
        return departureAirport;
    }

    public Airport getArrivalAirport() {
        return arrivalAirport;
    }

    public void changesDepartureEstimatedFlight(LocalDateTime localDateTime){
        setDepartureEstimated(localDateTime);
        this.setChanged();
        this.notifyObservers();
    }

    public void changesArrivalEstimatedFlight(LocalDateTime localDateTime){
        setArrivalEstimated(localDateTime);
        this.setChanged();
        notifyObservers();
    }


 @Override
    public List<User> findAll() {
        List<User> userList = new ArrayList<>();
        try (PreparedStatement preparedStatement = conn.prepareStatement("select * from users");
        ){
            ResultSet rs = preparedStatement.executeQuery();
            while (rs.next()) {
                Set<Role> roles = new HashSet<>();
                // roles
                PreparedStatement psRoles = conn.prepareStatement("select role_name from roles_by_user inner join roles r on roles_by_user.id_role = r.id where id_user = ?");
                psRoles.setInt(1, rs.getInt("id"));
                ResultSet rsRoles = psRoles.executeQuery();
                while (rsRoles.next()) {
                    roles.add(Role.valueOf(rsRoles.getString("role_name")));
                }
                userList.add(User.builder()
                        .roles(roles)
                        .username("username")
                        .name(rs.getString("name"))
                        .lastName(rs.getString("last_name"))
                        .id(rs.getInt("id"))
                        .birthday(rs.getDate("birthday").toLocalDate())
                        .build());
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return userList;
    }
