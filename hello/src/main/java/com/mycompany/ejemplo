private DigitalMenuResponse validateResponseWithCode(final Response response){

        final DigitalMenuErrorResponse digitalMenuErrorResponse;
        switch(response.getStatus()){
        case 200:
            final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
            return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
        case 422:
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response
                    .readEntity(DigitalMenuErrorWithParamsResponse.class);
            throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse,
                    response.getStatus());
        case 401:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                    DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);

        case 403:
            digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR,
                    digitalMenuErrorResponse.getDetail(), response.getStatus());

        case 404:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                    DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
        case 502:
        case 503:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
        default:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);

        }
    }

    private AllergensResponse validateAllergensResponse(final Response response){

        switch(response.getStatus()){
        case 200:
            final AllergensIBDPResponse allergensIBDPResponse = response.readEntity(
                    AllergensIBDPResponse.class);
            return allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse);
        case 422:
        case 412:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, LANGUAGE_NOT_FOUND,
                    response.getStatus());
        case 401:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR,
                    "UNAUTHORIZED", 401);
        case 403:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, "UNAUTHORIZED",
                    403);
        default:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
        }
    }











private DigitalMenuResponse validateResponseWithCode(final Response response) {
    final int status = response.getStatus();
    final DigitalMenuErrorResponse digitalMenuErrorResponse;

    switch (status) {
        case 200:
            return handle200Response(response);
        case 422:
            handle422Response(response);
        case 401:
            handle401Response(response);
        case 403:
            handle403Response(response);
        case 404:
            handle404Response(response);
        case 502:
        case 503:
            handle5xxResponse(response);
        default:
            handleDefaultResponse(response);
    }
    return null; // Nunca debería llegar aquí
}

private DigitalMenuResponse handle200Response(final Response response) {
    final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
    return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
}

private void handle422Response(final Response response) {
    final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response.readEntity(DigitalMenuErrorWithParamsResponse.class);
    throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse, response.getStatus());
}

private void handle401Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
            DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);
}

private void handle403Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
    throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, digitalMenuErrorResponse.getDetail(), response.getStatus());
}

private void handle404Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
            DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
}

private void handle5xxResponse(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
}

private void handleDefaultResponse(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);
}
