Develop a program that checks whether the parentheses, curly braces, and square brackets in an expression are balanced.
Balanced means that these delimiters are opened and closed in the correct order and manner.
Parentheses, curly braces, and square brackets have equal priority; there is no one more important than the other.
Balanced expression: { [ a * ( c + d ) ] - 5 }
Unbalanced expression: { a * ( c + d ) ] - 5 }


private PackageAllocation alloc(List<DeliveryTruck> trucks, DeliveryPackage aPackage) {
            PackageAllocation packageAllocation = null;
            for (DeliveryTruck deliveryTruck : deliveryTrucks) {
                if (
                    (deliveryTruck.getDistricts().contains(aPackage.district()) && // It's in same district
                            (deliveryTruck.getCurrentVolume() + aPackage.volume() <= deliveryTruck.getMaxVolume()) && // Has volume cap
                            (deliveryTruck.getCurrentWeight() + aPackage.weight() <= deliveryTruck.getMaxWeight()) // Has weight cap
                )) {
                    packageAllocation = new PackageAllocation(aPackage, deliveryTruck, Status.ALLOCATED);
                    // Update Truck Load
                    deliveryTruck.weigth(deliveryTruck.getCurrentWeight() - aPackage.weight());
                    deliveryTruck.volume(deliveryTruck.getCurrentVolume() - aPackage.volume());
                    
                    break;
                }
            }
            if (packageAllocation == null) {
                throw new RuntimeException("Unable to allocate package id: %s. No truck available".formatted(deliveryPackage.id()));
            }
	     return packageAllocation;
}


import java.util.List;

public class PackageAllocation {
    private DeliveryPackage deliveryPackage;
    private DeliveryTruck deliveryTruck;
    private Status status;

    public PackageAllocation(DeliveryPackage deliveryPackage, DeliveryTruck deliveryTruck, Status status) {
        this.deliveryPackage = deliveryPackage;
        this.deliveryTruck = deliveryTruck;
        this.status = status;
    }

    // Getters y Setters
}

public class DeliveryPackage {
    private int id;
    private int volume;
    private int weight;
    private String district;

    // Constructor, Getters y Setters
}

public class DeliveryTruck {
    private List<String> districts;
    private int maxVolume;
    private int maxWeight;
    private int currentVolume;
    private int currentWeight;

    // Constructor, Getters y Setters

    public void updateLoad(int weight, int volume) {
        currentWeight -= weight;
        currentVolume -= volume;
    }
}

public enum Status {
    ALLOCATED,
    // Otros estados si los hubiera
}

