@Test
public void givenAValidRequestForFlightStatusThenShouldReturnAValidFlightStatusResponse()
        throws IOException{
    testFlightStatus("/datalake/flight/status/IB/448/dep/2021/07/16", FLIGHT_STATUS_RESPONSE_JSON, new FlightStatusServiceMethod() {
        @Override
        public FlightStatusResponse apply(DataLakeRequest request) {
            return service.getFlightStatus(request);
        }
    });
}

@Test
public void givenAValidRequestForScheduledFlightsByAirportThenShouldReturnAValidFlightStatusResponse()
        throws IOException{
    testFlightStatus("/datalake/airport/status/MAD/dep/2021/07/16/13", SCHEDULED_FLIGHTS_BY_AIRPORT_RESPONSE_JSON, new FlightStatusServiceMethod() {
        @Override
        public FlightStatusResponse apply(DataLakeRequest request) {
            return service.getScheduledFlightsByAirport(request);
        }
    });
}

@Test
public void givenAValidRequestForScheduledFlightsByRouteThenShouldReturnAValidFlightStatusResponse()
        throws IOException{
    testFlightStatus("/datalake/route/status/MAD/BCN/dep/2021/07/16", SCHEDULED_FLIGHTS_BY_ROUTE_RESPONSE_JSON, new FlightStatusServiceMethod() {
        @Override
        public FlightStatusResponse apply(DataLakeRequest request) {
            return service.getScheduledFlightsByRoute(request);
        }
    });
}

private void testFlightStatus(String path, String jsonResponse, FlightStatusServiceMethod serviceMethod)
        throws IOException {
    expected = getFlightStatusWebResponse(jsonResponse);
    flightStatusResponse = buildFlightStatusResponse();
    doReturn(flightStatusResponse).when(service).getFlightStatus(Mockito.any(DataLakeRequest.class));
    response = getResponse(path);
    assertThatStatus(response);
    result = getResult(response);
    assertResponse(result, expected);
}

interface FlightStatusServiceMethod {
    FlightStatusResponse apply(DataLakeRequest request);
}
