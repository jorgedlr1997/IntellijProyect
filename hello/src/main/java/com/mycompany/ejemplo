public class MorseCodeTranslatorRefactor {

    private static final String EMPTY_TEXT = "";

    private static final Map<String, Character> morseCodeToTextMap = Map.ofEntries(
            Map.entry(".-", 'A'),
            Map.entry("-...", 'B'),
            Map.entry("-.-.", 'C'),
            Map.entry("-..", 'D'),
            Map.entry(".", 'E'),
            Map.entry("..-.", 'F'),
            Map.entry("--.", 'G'),
            Map.entry("....", 'H'),
            Map.entry("..", 'I'),
            Map.entry(".---", 'J'),
            Map.entry("-.-", 'K'),
            Map.entry(".-..", 'L'),
            Map.entry("--", 'M'),
            Map.entry("-.", 'N'),
            Map.entry("---", 'O'),
            Map.entry(".--.", 'P'),
            Map.entry("--.-", 'Q'),
            Map.entry(".-.", 'R'),
            Map.entry("...", 'S'),
            Map.entry("-", 'T'),
            Map.entry("..-", 'U'),
            Map.entry("...-", 'V'),
            Map.entry(".--", 'W'),
            Map.entry("-..-", 'X'),
            Map.entry("-.--", 'Y'),
            Map.entry("--..", 'Z')
    );
    private static final Map<Character, String> morseCodeMap = Map.ofEntries(
            Map.entry('A', ".-"), Map.entry('B', "-..."), Map.entry('C', "-.-."), Map.entry('D', "-.."),
            Map.entry('E', "."), Map.entry('F', "..-."), Map.entry('G', "--."), Map.entry('H', "...."),
            Map.entry('I', ".."), Map.entry('J', ".---"), Map.entry('K', "-.-"), Map.entry('L', ".-.."),
            Map.entry('M', "--"), Map.entry('N', "-."), Map.entry('O', "---"), Map.entry('P', ".--."),
            Map.entry('Q', "--.-"), Map.entry('R', ".-."), Map.entry('S', "..."), Map.entry('T', "-"),
            Map.entry('U', "..-"), Map.entry('V', "...-"), Map.entry('W', ".--"), Map.entry('X', "-..-"),
            Map.entry('Y', "-.--"), Map.entry('Z', "--.."),
            Map.entry('0', "-----"), Map.entry('1', ".----"), Map.entry('2', "..---"),
            Map.entry('3', "...--"), Map.entry('4', "....-"), Map.entry('5', "....."), Map.entry('6', "-...."),
            Map.entry('7', "--..."), Map.entry('8', "---.."), Map.entry('9', "----."),
            Map.entry('.', ".-.-.-"), Map.entry(',', "--..--"), Map.entry('?', "..--.."), Map.entry('!', "-.-.--")
    );

    public String translate(String  source) {
        if (Objects.isNull(source)) return EMPTY_TEXT;
        if (source.isEmpty()) return EMPTY_TEXT;
        String result = EMPTY_TEXT;
        if (isMorseCode(source)) {
            String[] words = source.split("  ");
            for (int x = 0 ; (x < words.length); x++) {
                String[] letters = words[x].split(" ");
                for (int i = 0; (i < letters.length); i++) {
                    if (morseCodeToTextMap.containsKey(letters[i])) {
                        result = result + morseCodeToTextMap.get(letters[i]);
                    } else {
                        throw new IllegalArgumentException("Morse Code is not valid");
                    }
                }
                result = result + " ";
            }
        } else {
            String sourceUpper = source.toUpperCase();
            for (int x = 0; (x < sourceUpper.length()); x++) {
                final char character = sourceUpper.charAt(x);
                if (character != ' ') {
                    if (morseCodeMap.containsKey(sourceUpper.charAt(x)))
                        result = result + morseCodeMap.get(sourceUpper.charAt(x));
                    else
                        throw new IllegalArgumentException("Character is not valid");
                }
                result = result + ' ';
            }
        }
        return result.trim();
    }


    private boolean isMorseCode(String text) {
        return text.trim().startsWith(".") || text.trim().startsWith("-");
    }
}
