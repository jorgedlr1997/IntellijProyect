private DigitalMenuResponse validateResponseWithCode(final Response response){

        final DigitalMenuErrorResponse digitalMenuErrorResponse;
        switch(response.getStatus()){
        case 200:
            final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
            return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
        case 422:
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response
                    .readEntity(DigitalMenuErrorWithParamsResponse.class);
            throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse,
                    response.getStatus());
        case 401:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                    DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);

        case 403:
            digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR,
                    digitalMenuErrorResponse.getDetail(), response.getStatus());

        case 404:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                    DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
        case 502:
        case 503:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
        default:
            digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
            throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);

        }
    }

    private AllergensResponse validateAllergensResponse(final Response response){

        switch(response.getStatus()){
        case 200:
            final AllergensIBDPResponse allergensIBDPResponse = response.readEntity(
                    AllergensIBDPResponse.class);
            return allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse);
        case 422:
        case 412:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, LANGUAGE_NOT_FOUND,
                    response.getStatus());
        case 401:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR,
                    "UNAUTHORIZED", 401);
        case 403:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, "UNAUTHORIZED",
                    403);
        default:
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
        }
    }











private DigitalMenuResponse validateResponseWithCode(final Response response) {
    final int status = response.getStatus();
    final DigitalMenuErrorResponse digitalMenuErrorResponse;

    switch (status) {
        case 200:
            return handle200Response(response);
        case 422:
            handle422Response(response);
        case 401:
            handle401Response(response);
        case 403:
            handle403Response(response);
        case 404:
            handle404Response(response);
        case 502:
        case 503:
            handle5xxResponse(response);
        default:
            handleDefaultResponse(response);
    }
    return null; // Nunca debería llegar aquí
}

private DigitalMenuResponse handle200Response(final Response response) {
    final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
    return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
}

private void handle422Response(final Response response) {
    final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response.readEntity(DigitalMenuErrorWithParamsResponse.class);
    throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse, response.getStatus());
}

private void handle401Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
            DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);
}

private void handle403Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
    throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, digitalMenuErrorResponse.getDetail(), response.getStatus());
}

private void handle404Response(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
            DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
}

private void handle5xxResponse(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
}

private void handleDefaultResponse(final Response response) {
    final DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
    throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);
}












package com.ib.captwo.ibdp.favl.coreservice.impl;

import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorDetailResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorWithParamsResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuIBDPResponse;
import com.ib.captwo.ibdp.favl.api.domain.allergens.AllergensIBDPResponse;
import com.ib.captwo.ibdp.favl.converters.DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
import com.ib.captwo.ibdp.favl.converters.allergens.AllegernsIBDPResponseIntoAllergensResponseConverter;
import com.ib.captwo.ibdp.favl.coreservice.clients.DigitalMenuRSClient;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuErrorCodes;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuProviderServiceException;
import com.ib.captwo.ibdp.favl.kpi.digitalmenu.KpiDigitalMenuProviderGenerator;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.DigitalMenuProvider;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.DigitalMenuUtils;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuFlightRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuProviderRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuProviderResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.allergens.AllergensResponse;
import com.ib.framework.domain.Realm;
import com.ib.framework.exception.IBBusinessException;
import com.ib.framework.logging.core.KpiLog;
import com.ib.framework.logging.core.KpiType;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.DependsOn;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import javax.ws.rs.BadRequestException;
import javax.ws.rs.client.ClientException;
import javax.ws.rs.core.Response;
import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;

@Component
@DependsOn("digitalMenuRSClient")
public class DigitalMenuProviderServiceImpl implements DigitalMenuProvider{

    private static final String ERROR_FORMAT = "%s -> %s";
    private static final String LANGUAGE_NOT_FOUND = "Language not indicated";
    private final String apiKey;

    private final DigitalMenuUtils digitalMenuUtils;
    private final DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter digitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
    private final AllegernsIBDPResponseIntoAllergensResponseConverter allegernsIBDPResponseIntoAllergensResponseConverter;

    @Resource(name = "digitalMenuRSClient")
    private final DigitalMenuRSClient digitalMenuRSClient;

    @Autowired
    public DigitalMenuProviderServiceImpl(final DigitalMenuUtils digitalMenuUtils,
                                          @Qualifier("digitalMenuRSClient") final DigitalMenuRSClient digitalMenuRSClient,
                                          @Qualifier("digitalMenuIBDPResponseIntoDigitalMenuResponseConverter") final DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter digitalMenuIBDPResponseIntoDigitalMenuResponseConverter,
                                          @Qualifier("allegernsIBDPResponseIntoAllergensResponseConverter") final AllegernsIBDPResponseIntoAllergensResponseConverter allegernsIBDPResponseIntoAllergensResponseConverter,
                                          @Value("${com.ib.captwo.ibdp.favl.service.endpoint.appKey}") final String apiKey){
        this.digitalMenuUtils = digitalMenuUtils;
        this.digitalMenuRSClient = digitalMenuRSClient;
        this.digitalMenuIBDPResponseIntoDigitalMenuResponseConverter = digitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
        this.allegernsIBDPResponseIntoAllergensResponseConverter = allegernsIBDPResponseIntoAllergensResponseConverter;
        this.apiKey = apiKey;
    }

    @Override
    @KpiLog(operation = "getDigitalMenus", service = "digitalMenuService", kpi = KpiDigitalMenuProviderGenerator.class,
            type = KpiType.KPI_ERROR, realm = Realm.Booking, stacktraceLength = 0)
    public DigitalMenuProviderResponse getDigitalMenu(final DigitalMenuProviderRequest digitalMenuProviderRequest){
        final List<DigitalMenuResponse> digitalMenuResponseList = new ArrayList<>();
        for(final DigitalMenuFlightRequest digitalMenuFlightRequest : digitalMenuProviderRequest
                .getDigitalMenuFlightList()){
            callIBDPClient(digitalMenuResponseList, digitalMenuFlightRequest);
        }
        return DigitalMenuProviderResponse.builder().withDigitalMenuResponseList(digitalMenuResponseList).build();
    }

    @Override
    @KpiLog(operation = "getAllergens", service = "digitalMenuService", kpi = KpiDigitalMenuProviderGenerator.class,
            type = KpiType.KPI_ERROR, realm = Realm.Booking, stacktraceLength = 0)
    public AllergensResponse getAllergens(final String language){
        try{
            final Response response = digitalMenuRSClient.getAllergens(language, apiKey);
            return validateAllergensResponse(response);
        }catch(final BadRequestException badRequest){
            throw new IBBusinessException(DigitalMenuErrorCodes.BAD_REQUEST, badRequest);
        }catch(final ClientException ce){
            handleSocketTimeoutException(ce);
            handleConnectException(ce);
        }

        return null;
    }

    private void callIBDPClient(final List<DigitalMenuResponse> digitalMenuResponseList,
                                final DigitalMenuFlightRequest digitalMenuFlightRequest){
        final DigitalMenuResponse digitalMenuResponse;
        try{
            String cabin = null;
            if(digitalMenuFlightRequest.getCabin() != null){
                cabin = digitalMenuFlightRequest.getCabin().name();
            }
            final Response response = digitalMenuRSClient.getDigitalMenus(digitalMenuFlightRequest.getCompany(),
                    getFlightNumber(digitalMenuFlightRequest.getNumber()),
                    transformLocalDateToString(digitalMenuFlightRequest.getDepartureDate()), cabin,
                    digitalMenuUtils.getLanguage(), apiKey);

            digitalMenuResponse = validateResponseWithCode(response);
            digitalMenuResponseList.add(digitalMenuResponse);
        }catch(final BadRequestException badRequest){
            throw new IBBusinessException(DigitalMenuErrorCodes.BAD_REQUEST, badRequest);
        }catch(final ClientException ce){
            handleSocketTimeoutException(ce);
            handleConnectException(ce);
        }
    }

    private void handleSocketTimeoutException(final ClientException ce){
        if(ce.getCause() instanceof SocketTimeoutException){
            throw new IBBusinessException(DigitalMenuErrorCodes.REQUEST_TIMEOUT);
        }
    }

    private void handleConnectException(final ClientException ce){
        if(ce.getCause() instanceof ConnectException){
            throw new IBBusinessException(DigitalMenuErrorCodes.BAD_GATEWAY);
        }
    }

    private String transformLocalDateToString(final LocalDate date){
        if(date != null){
            try{
                final DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd");
                return fmt.print(date);
            }catch(final IllegalArgumentException e){
                return null;
            }
        }
        return null;
    }

    private String getFlightNumber(final String flightNumber){
        String formattedFlightNumber = flightNumber;
        if(flightNumber.length() < 4){
            formattedFlightNumber = String.format("%04d", Integer.valueOf(flightNumber));
        }
        return formattedFlightNumber;
    }

    /**
     * Map bad request from IBDPErrorCode to DigitalMenuErrorCode
     * @param digitalMenuErrorWithParamsResponse Response from IBDP (with error code)
     * @param responseStatus HTTP code from IBDP
     * */
    private DigitalMenuProviderServiceException getDigitalMenuProviderServiceBadRequestException(
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse, final int responseStatus){
        final StringBuilder description = new StringBuilder();
        for(final DigitalMenuErrorDetailResponse digitalMenuErrorDetailResponse : digitalMenuErrorWithParamsResponse
                .getDetails()){
            if(description.length() > 0){
                description.append(" / ");
            }
            description.append(digitalMenuErrorDetailResponse.getMsg()).append(": ")
                    .append(digitalMenuErrorDetailResponse.getLoc()[1]).append(", ")
                    .append(digitalMenuErrorDetailResponse.geType());
        }
        return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, description.toString(),
                responseStatus);
    }

    /* *********************************************************************
     *  Methods to map response of IBDP (with error structure with code)
     * ********************************************************************* */
    private DigitalMenuResponse validateResponseWithCode(final Response response){

        switch(response.getStatus()){
            case 200:
                return digitalMenuHandleStatus200(response);
            case 422:
                return digitalMenuHandleStatus422(response);
            case 401:
                return digitalMenuHandleStatus401(response);
            case 403:
                return digitalMenuHandleStatus403(response);
            case 404:
                return digitalMenuHandleStatus404(response);
            case 502:
            case 503:
                return digitalMenuHandleStatus50X(response);
            default:
                return digitalMenuHandleUnknowStatus(response);
        }
    }

    private DigitalMenuResponse digitalMenuHandleStatus200(Response response){
        final DigitalMenuIBDPResponse digitalMenuIBDPResponse = response.readEntity(DigitalMenuIBDPResponse.class);
        return digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse);
    }
    private DigitalMenuResponse digitalMenuHandleStatus422(Response response){
        final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = response
                .readEntity(DigitalMenuErrorWithParamsResponse.class);
        throw getDigitalMenuProviderServiceBadRequestException(digitalMenuErrorWithParamsResponse,
                response.getStatus());
    }

    private DigitalMenuResponse digitalMenuHandleStatus401(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR);
    }
    private DigitalMenuResponse digitalMenuHandleStatus403(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = response.readEntity(DigitalMenuErrorResponse.class);
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR,
                digitalMenuErrorResponse.getDetail(), response.getStatus());
    }
    private DigitalMenuResponse digitalMenuHandleStatus404(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, response.getStatus(),
                DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);
    }
    private DigitalMenuResponse digitalMenuHandleStatus50X(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw throwExceptionErrorResponse(digitalMenuErrorResponse, response.getStatus());
    }
    private DigitalMenuResponse digitalMenuHandleUnknowStatus(Response response){
        DigitalMenuErrorResponse digitalMenuErrorResponse = readDigitalMenuErrorResponse(response);
        throw getDefaultDigitalMenuProviderServiceException(digitalMenuErrorResponse, response);
    }

    private AllergensResponse validateAllergensResponse(final Response response){

        switch(response.getStatus()){
            case 200:
                return allergensHandleStatus200(response);
            case 422:
            case 412:
                return allergensHandleStatus4X2(response);
            case 401:
                return allergensHandleStatus401();
            case 403:
                return allergensHandleStatus403();
            default:
                return allergensUnknowStatus(response);
        }
    }
    private AllergensResponse allergensHandleStatus200(Response response){
        final AllergensIBDPResponse allergensIBDPResponse = response.readEntity(AllergensIBDPResponse.class);
        return allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse);
    }
    private AllergensResponse allergensHandleStatus4X2(Response response){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.BAD_REQUEST, LANGUAGE_NOT_FOUND,
                response.getStatus());
    }
    private AllergensResponse allergensHandleStatus401(){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.REQUEST_UNAUTHORIZED_ERROR,
                "UNAUTHORIZED", 401);
    }
    public AllergensResponse allergensHandleStatus403(){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.AUTHENTICATION_ERROR, "UNAUTHORIZED",
                403);
    }
    private AllergensResponse allergensUnknowStatus(Response response){
        throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
    }

    private DigitalMenuProviderServiceException throwExceptionErrorResponse(
            final DigitalMenuErrorResponse digitalMenuErrorResponse, final int status){
        if(digitalMenuErrorResponse == null){
            throw new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), status);
        }else {
            throw getDigitalMenuProviderServiceException(digitalMenuErrorResponse, status,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR);
        }
    }

    private DigitalMenuErrorResponse readDigitalMenuErrorResponse(final Response response){
        try{
            return response.readEntity(DigitalMenuErrorResponse.class);
        }catch(final Exception e){
            return null;
        }
    }

    /**
     * Map error from IBDPErrorCode to DigitalMenuErrorCode
     * @param digitalMenuErrorResponse Response from IBDP (with error code)
     * @param responseStatus HTTP code from IBDP
     * */
    private DigitalMenuProviderServiceException getDigitalMenuProviderServiceException(
            final DigitalMenuErrorResponse digitalMenuErrorResponse,
            final int responseStatus, final DigitalMenuErrorCodes digitalMenuResultErrorCode){

        if(digitalMenuErrorResponse == null){
            return new DigitalMenuProviderServiceException(digitalMenuResultErrorCode, null, responseStatus);
        }

        // Check Map DigitalMenuErrorCode Code for IBDPErrorCode
        final DigitalMenuErrorCodes digitalMenuErrorCodes = DigitalMenuErrorCodes.IBDPErrorCode
                .getDigitalMenuErrorCode(digitalMenuErrorResponse.getErrorDetails().getErrorCode());
        if(digitalMenuErrorCodes == null){
            // IBDPErrorCode not mapped throw UNEXPECTED_ERROR
            return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), responseStatus);
        }

        return new DigitalMenuProviderServiceException(digitalMenuErrorCodes,
                String.format(ERROR_FORMAT, digitalMenuErrorResponse.getErrorDetails().getErrorCode(),
                        digitalMenuErrorResponse.getErrorDetails().getMessage()), responseStatus);
    }

    private DigitalMenuProviderServiceException getDefaultDigitalMenuProviderServiceException(
            final DigitalMenuErrorResponse digitalMenuErrorResponse, final Response response){

        //Backward compatibility old error structure
        if(digitalMenuErrorResponse != null && digitalMenuErrorResponse.getErrorDetails() == null){
            return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                    response.readEntity(String.class), response.getStatus());
        }else {
            if(digitalMenuErrorResponse == null){
                return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                        DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription(), response.getStatus());
            }else {
                return new DigitalMenuProviderServiceException(DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                        digitalMenuErrorResponse.getErrorDetails().getErrorCode() + ": " + digitalMenuErrorResponse
                                .getErrorDetails().getErrorCode(), response.getStatus());
            }
        }
    }
}











package com.ib.captwo.ibdp.favl.coreservice.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuErrorWithParamsResponse;
import com.ib.captwo.ibdp.favl.api.domain.DigitalMenuIBDPResponse;
import com.ib.captwo.ibdp.favl.api.domain.allergens.AllergensIBDPResponse;
import com.ib.captwo.ibdp.favl.converters.DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter;
import com.ib.captwo.ibdp.favl.converters.allergens.AllegernsIBDPResponseIntoAllergensResponseConverter;
import com.ib.captwo.ibdp.favl.coreservice.clients.DigitalMenuRSClient;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuErrorCodes;
import com.ib.captwo.ibdp.favl.exceptions.DigitalMenuProviderServiceException;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.CabinType;
import com.ib.captwo.sse.favl.coreservice.digitalmenu.DigitalMenuUtils;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuFlightRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.request.DigitalMenuProviderRequest;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuProviderResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.DigitalMenuResponse;
import com.ib.captwo.sse.favl.coreservice.domain.digitalmenu.response.allergens.AllergensResponse;
import com.ib.framework.exception.IBBusinessException;
import com.ib.framework.utils.rest.CapTwoJackson2ObjectMapperFactory;
import org.apache.commons.io.IOUtils;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.i18n.LocaleContextHolder;

import javax.ws.rs.client.ClientException;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.util.Collections;
import java.util.Locale;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DigitalMenuProviderServiceImplTest{

    private static final String ERROR_FORMAT = "%s -> %s";
    private static final String COMPANY = "IB";
    private static final String NUMBER = "248";
    private static final String FORMATTED_NUMBER = "0248";
    private static final LocalDate DEPARTURE_LOCAL_DATE = LocalDate.now();
    private final String DEPARTURE_DATE = transformLocalDateToString();
    private static final String API_KEY = "apiKey";

    private final DigitalMenuUtils digitalMenuUtils = mock(DigitalMenuUtils.class);
    private final DigitalMenuRSClient digitalMenuRSClient = mock(DigitalMenuRSClient.class);
    private final DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter digitalMenuIBDPResponseIntoDigitalMenuResponseConverter = mock(
            DigitalMenuIBDPResponseIntoDigitalMenuResponseConverter.class);

    private final AllegernsIBDPResponseIntoAllergensResponseConverter allegernsIBDPResponseIntoAllergensResponseConverter = mock(
            AllegernsIBDPResponseIntoAllergensResponseConverter.class);

    protected DigitalMenuProviderServiceImpl service;
    private final Locale locale = new Locale("es", "ES");

    @Before
    public void setUp(){
        service = new DigitalMenuProviderServiceImpl(digitalMenuUtils, digitalMenuRSClient,
                digitalMenuIBDPResponseIntoDigitalMenuResponseConverter,
                allegernsIBDPResponseIntoAllergensResponseConverter, API_KEY);
        when(digitalMenuUtils.getLanguage()).thenReturn("es");
        LocaleContextHolder.setLocale(locale);
    }

    @Test
    public void shouldCallRSClient_WhenAskedToDigitalMenu(){

        final DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

        final DigitalMenuIBDPResponse digitalMenuIBDPResponse = openStreamFromFile("/json/digitalMenuIBDPResponse.json",
                DigitalMenuIBDPResponse.class);

        final DigitalMenuResponse expectedResponse = mock(DigitalMenuResponse.class);
        when(digitalMenuIBDPResponseIntoDigitalMenuResponseConverter.convert(digitalMenuIBDPResponse))
                .thenReturn(expectedResponse);

        final Response responseOk = mock(Response.class);
        when(responseOk.getStatus()).thenReturn(Response.Status.OK.getStatusCode());
        when(responseOk.readEntity(DigitalMenuIBDPResponse.class)).thenReturn(digitalMenuIBDPResponse);

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(responseOk);

        //when
        final DigitalMenuProviderResponse result = service.getDigitalMenu(digitalMenuProviderRequest);

        //then
        assertThat(result.getDigitalMenuResponseList().get(0), is(expectedResponse));
    }

    @Test
    public void shouldCallRSClient_WhenAskedToGetAllergen(){
        //given
        final AllergensIBDPResponse allergensIBDPResponse = mock(AllergensIBDPResponse.class);
        final AllergensResponse expectedResponse = mock(AllergensResponse.class);
        final Response responseOk = mock(Response.class);
        when(allegernsIBDPResponseIntoAllergensResponseConverter.convert(allergensIBDPResponse))
                .thenReturn(expectedResponse);
        when(responseOk.getStatus()).thenReturn(Response.Status.OK.getStatusCode());
        when(responseOk.readEntity(AllergensIBDPResponse.class)).thenReturn(allergensIBDPResponse);
        when(digitalMenuRSClient.getAllergens(
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(responseOk);
        //when
        final AllergensResponse result = service.getAllergens(LocaleContextHolder.getLocale().getLanguage());
        //then
        assertThat(result, is(expectedResponse));
    }

    @Test
    public void shouldReturnUnauthorizedError_WhenAskedToToDigitalMenuWithWrongAuthenticationDataThatProvokeUnauthorizedResponseV2(){

        final DigitalMenuErrorResponse digitalMenuErrorResponse = openStreamFromFile(
                "/json/digitalMenuIBDPUnauthorizedV2.json", DigitalMenuErrorResponse.class);

        final String expectedDescription = getExpectedDescriptionFromDigitalMenuErrorResponse(digitalMenuErrorResponse);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(Response.Status.UNAUTHORIZED.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(digitalMenuErrorResponse);

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(response);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.FLIGHT_NOT_FOUND, expectedDescription);
    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvoquesNotFoundAndErrorCodeIsNotMappedResponseV2(){

        final DigitalMenuErrorResponse digitalMenuErrorResponse = openStreamFromFile(
                "/json/digitalMenuIBDPNotFoundWithInvalidErrorCodeV2.json", DigitalMenuErrorResponse.class);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(Response.Status.NOT_FOUND.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(digitalMenuErrorResponse);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription());
    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvokeServiceUnavailableAndReadEntityIsNullResponseV2(){
        final Response response = buildResponseWithStatusAndTestEntity(Response.Status.SERVICE_UNAVAILABLE);
        callServiceAndExpectedException(response, DigitalMenuErrorCodes.UNEXPECTED_ERROR,
                DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription());
    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvokeNotFoundAndReadEntityIsNullResponseV2(){
        final Response response = buildResponseWithStatusAndTestEntity(Response.Status.NOT_FOUND);
        callServiceAndExpectedException(response, DigitalMenuErrorCodes.FLIGHT_NOT_FOUND, null);
    }

    private Response buildResponseWithStatusAndTestEntity(final Response.Status status){
        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(status.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(null);
        when(response.readEntity(String.class)).thenReturn("TEST");
        return response;
    }

    @Test
    public void shouldReturnRESTResponseError_WhenAskedToDigitalMenuWithWrongDataThatProvoquesBadRequestResponse(){

        final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse = openStreamFromFile(
                "/json/digitalMenuIBDPBadRequest.json", DigitalMenuErrorWithParamsResponse.class);

        final String expectedDescription = buildExpectedDescription(digitalMenuErrorWithParamsResponse);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(422);
        when(response.readEntity(DigitalMenuErrorWithParamsResponse.class))
                .thenReturn(digitalMenuErrorWithParamsResponse);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.BAD_REQUEST, expectedDescription);

    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenInternalServerError(){

        final String expectedDescription = DigitalMenuErrorCodes.UNEXPECTED_ERROR.getErrorDescription();

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());
        when(response.readEntity(String.class)).thenReturn(expectedDescription);

        callServiceAndExpectedException(response, DigitalMenuErrorCodes.UNEXPECTED_ERROR, expectedDescription);
    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenInternalServerErrorV2(){
        baseReturnExpectedErrorAndDescription("/json/digitalMenuIBDPBadGatewayV2.json", Response.Status.BAD_GATEWAY,
                DigitalMenuErrorCodes.FLIGHT_NOT_FOUND);

    }

    @Test
    public void shouldReturnNotFound_WhenAskedToDigitalMenuProvoquesNotFoundResponseV2(){
        baseReturnExpectedErrorAndDescription("/json/digitalMenuIBDPNotFoundV2.json", Response.Status.NOT_FOUND,
                DigitalMenuErrorCodes.CABIN_NOT_ALLOWED);
    }

    private void baseReturnExpectedErrorAndDescription(final String file, final Response.Status statusExpected,
            final DigitalMenuErrorCodes errorExpected){

        final DigitalMenuErrorResponse digitalMenuErrorResponse = openStreamFromFile(file,
                DigitalMenuErrorResponse.class);

        final String expectedDescription = getExpectedDescriptionFromDigitalMenuErrorResponse(digitalMenuErrorResponse);

        final Response response = mock(Response.class);
        when(response.getStatus()).thenReturn(statusExpected.getStatusCode());
        when(response.readEntity(DigitalMenuErrorResponse.class)).thenReturn(digitalMenuErrorResponse);

        callServiceAndExpectedException(response, errorExpected, expectedDescription);

    }

    private String getExpectedDescriptionFromDigitalMenuErrorResponse(
            final DigitalMenuErrorResponse digitalMenuErrorResponse){
        return String.format(ERROR_FORMAT, digitalMenuErrorResponse.getErrorDetails().getErrorCode(),
                digitalMenuErrorResponse.getErrorDetails().getMessage());
    }

    private void callServiceAndExpectedException(final Response responseExpected,
            final DigitalMenuErrorCodes errorExpected, final String descriptionExpected){

        final DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenReturn(responseExpected);

        try{
            service.getDigitalMenu(digitalMenuProviderRequest);
        }catch(final Exception e){
            final DigitalMenuProviderServiceException exception = (DigitalMenuProviderServiceException) e;
            assertThat(exception.getErrorCode(), is(errorExpected.getErrorCode()));
            assertThat(exception.getErrorDescription(), is(errorExpected.getErrorDescription()));
            assertThat(exception.getDescription(), is(descriptionExpected));
        }

    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenBadRequestException(){
        baseWhenDigitalMenuClientThrowException(new javax.ws.rs.BadRequestException(),
                DigitalMenuErrorCodes.BAD_REQUEST);
    }

    @Test
    public void getDigitalMenuShouldThrowExceptionWhenClientException(){
        baseWhenDigitalMenuClientThrowException(new ClientException(new SocketTimeoutException()),
                DigitalMenuErrorCodes.REQUEST_TIMEOUT);
    }

    private void baseWhenDigitalMenuClientThrowException(final Exception exceptionThrown,
            final DigitalMenuErrorCodes expetectedError){
        final DigitalMenuProviderRequest digitalMenuProviderRequest = mockDigitalMenuProviderRequest();

        when(digitalMenuRSClient.getDigitalMenus(COMPANY, FORMATTED_NUMBER, DEPARTURE_DATE, CabinType.BUSINESS.name(),
                LocaleContextHolder.getLocale().getLanguage(), API_KEY)).thenThrow(exceptionThrown);

        try{
            service.getDigitalMenu(digitalMenuProviderRequest);
        }catch(final IBBusinessException exception){
            assertThat(exception.getErrorCode(), is(expetectedError.getErrorCode()));
        }
    }

    private String buildExpectedDescription(
            final DigitalMenuErrorWithParamsResponse digitalMenuErrorWithParamsResponse){
        return digitalMenuErrorWithParamsResponse.getDetails().get(0).getMsg() + ": "
                + digitalMenuErrorWithParamsResponse.getDetails().get(0).getLoc()[1] + ", "
                + digitalMenuErrorWithParamsResponse.getDetails().get(0).geType() + " / "
                + digitalMenuErrorWithParamsResponse.getDetails().get(1).getMsg() + ": "
                + digitalMenuErrorWithParamsResponse.getDetails().get(1).getLoc()[1] + ", "
                + digitalMenuErrorWithParamsResponse.getDetails().get(1).geType();
    }

    private DigitalMenuProviderRequest mockDigitalMenuProviderRequest(){
        final DigitalMenuProviderRequest digitalMenuProviderRequest = mock(DigitalMenuProviderRequest.class);
        final DigitalMenuFlightRequest digitalMenuFlightRequest = mock(DigitalMenuFlightRequest.class);
        when(digitalMenuFlightRequest.getCompany()).thenReturn(COMPANY);
        when(digitalMenuFlightRequest.getNumber()).thenReturn(NUMBER);
        when(digitalMenuFlightRequest.getCabin()).thenReturn(CabinType.BUSINESS);
        when(digitalMenuFlightRequest.getDepartureDate()).thenReturn(DEPARTURE_LOCAL_DATE);
        when(digitalMenuProviderRequest.getDigitalMenuFlightList())
                .thenReturn(Collections.singletonList(digitalMenuFlightRequest));
        return digitalMenuProviderRequest;
    }

    private <T> T openStreamFromFile(final String path, final Class<T> clase){
        final ObjectMapper mapper = CapTwoJackson2ObjectMapperFactory.getInstance();
        T digitalMenuErrorResponse = null;
        try(final InputStream inputStream = DigitalMenuProviderServiceImplTest.class.getResource(path).openStream()){
            digitalMenuErrorResponse = mapper.readValue(IOUtils.toString(inputStream), clase);
        }catch(final IOException ioex){
            fail("Error loading json file");
        }
        return digitalMenuErrorResponse;
    }

    private String transformLocalDateToString(){
        try{
            final DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd");
            return fmt.print(DigitalMenuProviderServiceImplTest.DEPARTURE_LOCAL_DATE);
        }catch(final IllegalArgumentException e){
            return null;
        }
    }
}

