package com.ib.captwo.datalake.favl.coreservice.impl;

import com.ib.captwo.datalake.favl.api.domain.DataLakeRequest;
import com.ib.captwo.datalake.favl.api.domain.FlightStatusDLResponse;
import com.ib.captwo.datalake.favl.converters.FlightStatusDLResponseIntoFlightStatusResponseConverter;
import com.ib.captwo.datalake.favl.coreservice.FavlDataLakeProviderService;
import com.ib.captwo.datalake.favl.coreservice.clients.DataLakeRSClient;
import com.ib.captwo.datalake.favl.coreservice.domain.FlightStatusResponse;
import com.ib.captwo.datalake.favl.exceptions.FavlDataLakeErrorCodes;
import com.ib.captwo.datalake.favl.exceptions.FavlDataLakesProviderServiceException;
import com.ib.framework.context.ClientContextHolder;
import com.ib.framework.domain.Realm;
import com.ib.framework.exception.IBBusinessException;
import com.ib.framework.logging.core.KpiLogDefault;
import com.ib.framework.logging.core.KpiType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import javax.ws.rs.BadRequestException;
import javax.ws.rs.client.ClientException;
import javax.ws.rs.core.Response;
import java.net.ConnectException;
import java.net.SocketTimeoutException;

@SuppressWarnings("deprecation")
@Component
@DependsOn("dataLakeRSClient")
public class FavlDataLakeProviderServiceImpl implements FavlDataLakeProviderService{

    private final String appKey;
    private final String appId;

    private final FlightStatusDLResponseIntoFlightStatusResponseConverter flightStatusDLResponseIntoFlightStatusResponseConverter;

    @Resource(name = "dataLakeRSClient")
    private final DataLakeRSClient dataLakeRSClient;

    @Autowired
    public FavlDataLakeProviderServiceImpl(@Qualifier("dataLakeRSClient")
    final DataLakeRSClient dataLakeRSClient, @Qualifier("flightStatusDLResponseIntoFlightStatusResponseConverter")
    final FlightStatusDLResponseIntoFlightStatusResponseConverter flightStatusDLResponseIntoFlightStatusResponseConverter,
            @Value("${com.ib.captwo.datalake.favl.service.endpoint.appKey}")
            final String appKey, @Value("${com.ib.captwo.datalake.favl.service.endpoint.appId}")
            final String appId){
        this.dataLakeRSClient = dataLakeRSClient;
        this.flightStatusDLResponseIntoFlightStatusResponseConverter = flightStatusDLResponseIntoFlightStatusResponseConverter;
        this.appKey = appKey;
        this.appId = appId;
    }

    @Override
    @KpiLogDefault(type = KpiType.KPI_INFO, realm = Realm.Booking, operation = "getFlightStatus", service = "dataLakeService")
    public FlightStatusResponse getFlightStatus(final DataLakeRequest dataLakeRequest){
        final FlightStatusResponse flightStatusResponse = null;
        try{
            final Response response = dataLakeRSClient.getFlightStatus(dataLakeRequest.getCarrier(),
                    dataLakeRequest.getFlight(), dataLakeRequest.getDate().getYear(),
                    dataLakeRequest.getDate().getMonth(), dataLakeRequest.getDate().getDay(), appKey, appId,
                    LocaleContextHolder.getLocale().getLanguage(), ClientContextHolder.getContext().getClientId());
            return validateResponse(response);
        }catch(final BadRequestException badRequest){
            throw new IBBusinessException(FavlDataLakeErrorCodes.BAD_REQUEST, badRequest);
        }catch(final ClientException ce){
            handleSocketTimeoutException(ce);
            handleConnectException(ce);
        }

        return flightStatusResponse;
    }

    @Override
    @KpiLogDefault(type = KpiType.KPI_INFO, realm = Realm.Booking, operation = "getScheduledFlightsByAirport", service = "dataLakeService")
    public FlightStatusResponse getScheduledFlightsByAirport(final DataLakeRequest dataLakeRequest){
        final FlightStatusResponse flightStatusResponse = null;
        try{
            final Response response = dataLakeRSClient.getScheduledFlightsByAirport(dataLakeRequest.getAirport(),
                    dataLakeRequest.getDepOrArr(), dataLakeRequest.getDate().getYear(),
                    dataLakeRequest.getDate().getMonth(), dataLakeRequest.getDate().getDay(),
                    dataLakeRequest.getHourOfDay(), appKey, appId, LocaleContextHolder.getLocale().getLanguage(),
                    dataLakeRequest.getCarrier(), ClientContextHolder.getContext().getClientId());
            return validateResponse(response);
        }catch(final BadRequestException e){
            throw new IBBusinessException(FavlDataLakeErrorCodes.BAD_REQUEST, e);
        }catch(final ClientException e){
            handleSocketTimeoutException(e);
            handleConnectException(e);
        }

        return flightStatusResponse;
    }

    @Override
    @KpiLogDefault(type = KpiType.KPI_INFO, realm = Realm.Booking, operation = "getScheduledFlightsByRoute", service = "dataLakeService")
    public FlightStatusResponse getScheduledFlightsByRoute(final DataLakeRequest dataLakeRequest){
        final FlightStatusResponse flightStatusResponse = null;
        try{
            final Response response = dataLakeRSClient.getScheduledFlightsByRoute(dataLakeRequest.getDepartureAirport(),
                    dataLakeRequest.getArrivalAirport(), dataLakeRequest.getDepOrArr(),
                    dataLakeRequest.getDate().getYear(), dataLakeRequest.getDate().getMonth(),
                    dataLakeRequest.getDate().getDay(), appKey, appId, LocaleContextHolder.getLocale().getLanguage(),
                    dataLakeRequest.getCarrier(), ClientContextHolder.getContext().getClientId());
            return validateResponse(response);
        }catch(final ClientException ce){
            handleSocketTimeoutException(ce);
            handleConnectException(ce);
        }catch(final BadRequestException badRequest){
            throw new IBBusinessException(FavlDataLakeErrorCodes.BAD_REQUEST, badRequest);
        }

        return flightStatusResponse;
    }

    private void handleSocketTimeoutException(final ClientException ce){
        if(ce.getCause() instanceof SocketTimeoutException){
            throw new IBBusinessException(FavlDataLakeErrorCodes.REQUEST_TIMEOUT);
        }
    }

    private void handleConnectException(final ClientException ce){
        if(ce.getCause() instanceof ConnectException){
            throw new IBBusinessException(FavlDataLakeErrorCodes.BAD_GATEWAY);
        }
    }

    private FlightStatusResponse validateResponse(final Response response){
        switch(response.getStatus()){
        case 200:
            final FlightStatusDLResponse flightStatusDLResponse = response.readEntity(FlightStatusDLResponse.class);

            return flightStatusDLResponseIntoFlightStatusResponseConverter.convert(flightStatusDLResponse);
        case 400:
            throw new FavlDataLakesProviderServiceException(FavlDataLakeErrorCodes.BAD_REQUEST,
                    FavlDataLakeErrorCodes.BAD_REQUEST.getErrorDescription() + response.readEntity(String.class));
        case 401:
            throw new FavlDataLakesProviderServiceException(FavlDataLakeErrorCodes.REQUEST_UNAUTHORIZED_ERROR,
                    FavlDataLakeErrorCodes.REQUEST_UNAUTHORIZED_ERROR.getErrorDescription()
                            + response.readEntity(String.class));
        case 404:
            throw new FavlDataLakesProviderServiceException(FavlDataLakeErrorCodes.FLIGHTS_NOT_FOUND,
                    FavlDataLakeErrorCodes.FLIGHTS_NOT_FOUND.getErrorDescription() + response.readEntity(String.class));
        default:
            throw new FavlDataLakesProviderServiceException(FavlDataLakeErrorCodes.UNEXPECTED_ERROR,
                    FavlDataLakeErrorCodes.UNEXPECTED_ERROR.getErrorDescription() + response.readEntity(String.class));
        }
    }

}
