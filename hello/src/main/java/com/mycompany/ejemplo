package app.academy.controller;

import app.academy.model.ResponseType;
import app.academy.service.MovieFeignService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ClienteController {

    @Autowired
    MovieFeignService movieFeignService;

    @Autowired
    public ClienteController(MovieFeignService movieFeignService) {
        this.movieFeignService = movieFeignService;
    }

    @GetMapping("/{typeMovie}/{daysRented}")
    public ResponseEntity<ResponseType> calculatePriceAndPoints(@PathVariable String typeMovie, @PathVariable int daysRented) {
        return movieFeignService.calculatePriceAndPoints(typeMovie, daysRented);
    }
}package app.academy.service;

import app.academy.model.ResponseType;
import app.academy.model.TypeMovie;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class MovieFeignService {

    @Autowired
    TypeMovieClientRest typeMovieClientRest;

    public ResponseEntity<ResponseType> calculatePriceAndPoints(String typeMovie,int daysRented){
        return typeMovieClientRest.calculatePriceAndPoints(TypeMovie.valueOf(typeMovie), daysRented);
    }
}package app.academy.service;

import app.academy.model.ResponseType;
import app.academy.model.TypeMovie;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name= "servicio-movie-types")
public interface TypeMovieClientRest {

    @GetMapping("{typeMovie}/{daysRented}")
    ResponseEntity<ResponseType> calculatePriceAndPoints(@PathVariable TypeMovie typeMovie, @PathVariable int daysRented);
}package app.academy.model;

import lombok.*;

@Data
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ResponseType {
    private double price;
    private int frequentRenterPoints;
}
public enum TypeMovie {

    CHILDREN,
    NEW_RELEASE,
    REGULAR

}@RestController
//@RequestMapping("/api/movietype")
public class TypeController {

    TypeService typeService;

    @Autowired
    public TypeController(TypeService typeService) {
        this.typeService = typeService;
    }

    @GetMapping("/{typeMovie}/{daysRented}")
    public ResponseEntity<ResponseType> calculatePriceAndPoints(@PathVariable String typeMovie, @PathVariable int daysRented){
        MovieData data = new MovieData(TypeMovie.valueOf(typeMovie), daysRented);
        return ResponseEntity.status(HttpStatus.OK).body(typeService.calculate(data));
    }
}package com.academy.service;

import com.academy.model.MovieData;
import com.academy.model.ResponseType;
import com.academy.model.TypeMovie;
import com.academy.strategy.ChildrenMovie;
import com.academy.strategy.NewReleaseMovie;
import com.academy.strategy.RegularMovie;
import org.springframework.stereotype.Service;

@Service
public class TypeService {

    public static final int ZERO = 0;

    public ResponseType calculate(MovieData movieData){
        int frequentRenterPoints = ZERO;
        double price = getAmount(movieData);
        if (movieData.getTypeMovie() == TypeMovie.NEW_RELEASE) {
            frequentRenterPoints = new NewReleaseMovie().getFrequentRenterPoints(movieData.getDaysRented());
        }else{
            frequentRenterPoints++;
        }
        return new ResponseType(price, frequentRenterPoints);
    }

    private double getAmount(MovieData movieData) {
        return switch (movieData.getTypeMovie()){
            case REGULAR -> new RegularMovie().getAmount(movieData.getDaysRented());
            case CHILDREN -> new ChildrenMovie().getAmount(movieData.getDaysRented());
            case NEW_RELEASE -> new NewReleaseMovie().getAmount(movieData.getDaysRented());
            default -> throw new IllegalArgumentException();
        };
    }
}spring.application.name=servicio-movie-types
server.port=8001
