@Test
    public void getFlighInfo() throws ResiberException {
        SYSURVEYDISPLAY sysurveydisplay = mock(SYSURVEYDISPLAY.class);
        when(contractclient.getFlightInfo("123", "20/02/2022","MAD")).thenReturn(sysurveydisplay);
        SYSURVEYDISPLAY response = repository.getSeatsFlightInfo("123", "20/02/2022","MAD");
        verify(contractclient,times(1)).getFlightInfo("123", "20/02/2022","MAD");
        assertThat(response, is(sysurveydisplay));
    }

    @Test
    public void getFlighInfoThrowException() throws ResiberException {
        when(contractclient.getFlightInfo("123", "20/02/2022","MAD")).thenReturn(null);
        try{
            repository.getSeatsFlightInfo("123", "20/02/2022","MAD");
            fail("Expected exception");
        } catch (IBBusinessException e){
            assertThat(e.getErrorCode(), is(ResiberErrorCode.COMUNICATION_ERROR.getErrorCode()));
        }

    }

    @Test
    public void getStandByPassengerList() throws ResiberException {
        STANDBYLIST sysurveydisplay = mock(STANDBYLIST.class);
        when(contractclient.getStandByPassengerList("123", "20/02/2022","MAD")).thenReturn(sysurveydisplay);
        STANDBYLIST response = repository.getStandByFlightInfo("123", "20/02/2022","MAD");
        verify(contractclient,times(1)).getStandByPassengerList("123", "20/02/2022","MAD");
        assertThat(response, is(sysurveydisplay));
    }





@Test
    public void getFlighInfo() throws ResiberException {
        sysurveydisplay = mock(SYSURVEYDISPLAY.class);
        when(contractclient.getFlightInfo("123", "20/02/2022","MAD")).thenReturn(sysurveydisplay);
        SYSURVEYDISPLAY response = repository.getSeatsFlightInfo("123", "20/02/2022","MAD");
        verify(contractclient,times(1)).getFlightInfo("123", "20/02/2022","MAD");
        assertThat(response, is(sysurveydisplay));
    }

    private void mockito(ResiberContractService service){
        when(service(("123","20/02/2022","MAD"))).thenReturn(sysurveydisplay);
    }









mockitoBadRequest(service.getScheduledFlightsByRoute(request));
private void mockitoBadRequest(FlightStatusResponse service) {
        when(service).thenThrow(mock(BadRequestException.class));
    }
